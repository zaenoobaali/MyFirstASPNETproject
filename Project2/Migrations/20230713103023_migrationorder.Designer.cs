// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project2.Model;

#nullable disable

namespace Project2.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230713103023_migrationorder")]
    partial class migrationorder
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Project2.Model.Entities.Auction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discretion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FinalDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MarketerId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MarketerId");

                    b.ToTable("Auctions");
                });

            modelBuilder.Entity("Project2.Model.Entities.AuctionComm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AuctionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuctionId");

                    b.HasIndex("CustomerId");

                    b.ToTable("AuctionComms");
                });

            modelBuilder.Entity("Project2.Model.Entities.Bag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductOrderId")
                        .HasColumnType("int");

                    b.Property<int>("customerId")
                        .HasColumnType("int");

                    b.Property<int>("marketerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductOrderId");

                    b.HasIndex("customerId");

                    b.HasIndex("marketerId");

                    b.ToTable("Bags");
                });

            modelBuilder.Entity("Project2.Model.Entities.Complaint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ComplainerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discretion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ComplainerId");

                    b.ToTable("Complaints");
                });

            modelBuilder.Entity("Project2.Model.Entities.Cust_Auction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AuctionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("customerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuctionId");

                    b.HasIndex("customerId");

                    b.ToTable("Cust_Auctions");
                });

            modelBuilder.Entity("Project2.Model.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MarketerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Point")
                        .HasColumnType("int");

                    b.Property<string>("city")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("phoneNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.Property<string>("zone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MarketerId");

                    b.HasIndex("userId")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Birthdate = new DateTime(1999, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2023, 7, 13, 13, 30, 21, 493, DateTimeKind.Local).AddTicks(9342),
                            Name = "Zainab Ali",
                            Point = 0,
                            city = "Damascus",
                            phoneNumber = 963937239433L,
                            photo = "",
                            userId = 2,
                            zone = "Qatana"
                        },
                        new
                        {
                            Id = 2,
                            Birthdate = new DateTime(2002, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2023, 7, 13, 13, 30, 21, 493, DateTimeKind.Local).AddTicks(9451),
                            Name = "Razan Ali",
                            Point = 0,
                            city = "Damascus",
                            phoneNumber = 963996902853L,
                            photo = "",
                            userId = 3,
                            zone = "Qatana"
                        },
                        new
                        {
                            Id = 3,
                            Birthdate = new DateTime(2006, 8, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2023, 7, 13, 13, 30, 21, 493, DateTimeKind.Local).AddTicks(9482),
                            Name = "Zain Ali",
                            Point = 0,
                            city = "Damascus",
                            phoneNumber = 963936851060L,
                            photo = "",
                            userId = 4,
                            zone = "Qatana"
                        },
                        new
                        {
                            Id = 4,
                            Birthdate = new DateTime(2008, 6, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2023, 7, 13, 13, 30, 21, 493, DateTimeKind.Local).AddTicks(9688),
                            Name = "Raghad Ali",
                            Point = 0,
                            city = "Damascus",
                            phoneNumber = 963934470881L,
                            photo = "",
                            userId = 5,
                            zone = "Qatana"
                        },
                        new
                        {
                            Id = 5,
                            Birthdate = new DateTime(2009, 12, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2023, 7, 13, 13, 30, 21, 493, DateTimeKind.Local).AddTicks(9733),
                            Name = "Aya Ali",
                            Point = 0,
                            city = "Damascus",
                            phoneNumber = 963934470881L,
                            photo = "",
                            userId = 6,
                            zone = "Qatana"
                        },
                        new
                        {
                            Id = 6,
                            Birthdate = new DateTime(1973, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2023, 7, 13, 13, 30, 21, 493, DateTimeKind.Local).AddTicks(9786),
                            Name = "Arwa Essa",
                            Point = 0,
                            city = "Damascus",
                            phoneNumber = 963934470881L,
                            photo = "",
                            userId = 7,
                            zone = "Qatana"
                        },
                        new
                        {
                            Id = 7,
                            Birthdate = new DateTime(1962, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2023, 7, 13, 13, 30, 21, 494, DateTimeKind.Local).AddTicks(83),
                            Name = "Osama Ali",
                            Point = 0,
                            city = "Damascus",
                            phoneNumber = 963936851941L,
                            photo = "",
                            userId = 8,
                            zone = "Qatana"
                        },
                        new
                        {
                            Id = 8,
                            Birthdate = new DateTime(1970, 3, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2023, 7, 13, 13, 30, 21, 494, DateTimeKind.Local).AddTicks(120),
                            Name = "Saosan Ali",
                            Point = 0,
                            city = "Damascus",
                            phoneNumber = 963985920017L,
                            photo = "",
                            userId = 9,
                            zone = "Mazah"
                        },
                        new
                        {
                            Id = 9,
                            Birthdate = new DateTime(1998, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2023, 7, 13, 13, 30, 21, 494, DateTimeKind.Local).AddTicks(150),
                            Name = "Reem Manssor",
                            Point = 0,
                            city = "Damascus",
                            phoneNumber = 963998784139L,
                            photo = "",
                            userId = 10,
                            zone = "Moaadameah"
                        },
                        new
                        {
                            Id = 10,
                            Birthdate = new DateTime(1997, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2023, 7, 13, 13, 30, 21, 494, DateTimeKind.Local).AddTicks(220),
                            Name = "Magd Esber",
                            Point = 0,
                            city = "Damascus",
                            phoneNumber = 963995755940L,
                            photo = "",
                            userId = 11,
                            zone = "Dummar"
                        },
                        new
                        {
                            Id = 11,
                            Birthdate = new DateTime(1998, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2023, 7, 13, 13, 30, 21, 494, DateTimeKind.Local).AddTicks(259),
                            Name = "Rama Kaheel",
                            Point = 0,
                            city = "Damascus",
                            phoneNumber = 963935470669L,
                            photo = "",
                            userId = 12,
                            zone = "Kafar-sosah"
                        },
                        new
                        {
                            Id = 12,
                            Birthdate = new DateTime(1963, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2023, 7, 13, 13, 30, 21, 494, DateTimeKind.Local).AddTicks(288),
                            Name = "Mohamad Ahmad",
                            Point = 0,
                            city = "Damascus",
                            phoneNumber = 963934873326L,
                            photo = "",
                            userId = 13,
                            zone = "Mazah"
                        },
                        new
                        {
                            Id = 13,
                            Birthdate = new DateTime(1975, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2023, 7, 13, 13, 30, 21, 494, DateTimeKind.Local).AddTicks(316),
                            Name = "Abeer Ali",
                            Point = 0,
                            city = "Lattakia",
                            phoneNumber = 963983739169L,
                            photo = "",
                            userId = 14,
                            zone = "Jablah"
                        },
                        new
                        {
                            Id = 14,
                            Birthdate = new DateTime(1973, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2023, 7, 13, 13, 30, 21, 494, DateTimeKind.Local).AddTicks(345),
                            Name = "Samaher Ali",
                            Point = 0,
                            city = "Lattakia",
                            phoneNumber = 963967811417L,
                            photo = "",
                            userId = 15,
                            zone = "Jablah"
                        },
                        new
                        {
                            Id = 15,
                            Birthdate = new DateTime(1999, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2023, 7, 13, 13, 30, 21, 494, DateTimeKind.Local).AddTicks(413),
                            Name = "Rama Abd-AlHak",
                            Point = 0,
                            city = "Damascus",
                            phoneNumber = 963993991918L,
                            photo = "",
                            userId = 16,
                            zone = "Mohajreen"
                        },
                        new
                        {
                            Id = 16,
                            Birthdate = new DateTime(1999, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2023, 7, 13, 13, 30, 21, 494, DateTimeKind.Local).AddTicks(476),
                            Name = "Roua Edress",
                            Point = 0,
                            city = "Damascus",
                            phoneNumber = 963947222344L,
                            photo = "",
                            userId = 17,
                            zone = "Sabborah"
                        });
                });

            modelBuilder.Entity("Project2.Model.Entities.CustOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId");

                    b.ToTable("CustOrders");
                });

            modelBuilder.Entity("Project2.Model.Entities.CustPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("MarketerId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("ProductOrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("MarketerId");

                    b.HasIndex("PostId");

                    b.HasIndex("ProductOrderId");

                    b.ToTable("CustPosts");
                });

            modelBuilder.Entity("Project2.Model.Entities.Deliver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MarketerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("city")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("mobileNumber")
                        .HasColumnType("bigint");

                    b.Property<long>("phoneNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.Property<string>("zone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MarketerId");

                    b.HasIndex("userId")
                        .IsUnique();

                    b.ToTable("Delivers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 7, 13, 13, 30, 21, 494, DateTimeKind.Local).AddTicks(689),
                            Name = "Movo delivery",
                            city = "Damascus",
                            mobileNumber = 0L,
                            phoneNumber = 118054000L,
                            photo = "",
                            userId = 23,
                            zone = "Masaab ebn Omeer"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 7, 13, 13, 30, 21, 494, DateTimeKind.Local).AddTicks(703),
                            Name = "Al Kadmous",
                            city = "Damascus",
                            mobileNumber = 963987654321L,
                            phoneNumber = 0L,
                            photo = "",
                            userId = 24,
                            zone = "Al Hamra Street"
                        });
                });

            modelBuilder.Entity("Project2.Model.Entities.DelivOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeliverId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeliverId");

                    b.HasIndex("OrderId");

                    b.ToTable("DelivOrders");
                });

            modelBuilder.Entity("Project2.Model.Entities.FollowingPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("pageId")
                        .HasColumnType("int");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("pageId");

                    b.HasIndex("userId");

                    b.ToTable("FollowingPages");
                });

            modelBuilder.Entity("Project2.Model.Entities.Friend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("friendId")
                        .HasColumnType("int");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("friendId");

                    b.HasIndex("userId");

                    b.ToTable("Friends");
                });

            modelBuilder.Entity("Project2.Model.Entities.Maintainer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("userId");

                    b.ToTable("Maintainers");
                });

            modelBuilder.Entity("Project2.Model.Entities.Mark_Tender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MarketerId")
                        .HasColumnType("int");

                    b.Property<int>("TenderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MarketerId");

                    b.HasIndex("TenderId");

                    b.ToTable("Mark_Tenders");
                });

            modelBuilder.Entity("Project2.Model.Entities.Marketer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Point")
                        .HasColumnType("int");

                    b.Property<string>("city")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("mobileNumber")
                        .HasColumnType("bigint");

                    b.Property<long>("phoneNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.Property<string>("zone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("userId")
                        .IsUnique();

                    b.ToTable("Marketers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 7, 13, 13, 30, 21, 494, DateTimeKind.Local).AddTicks(568),
                            Name = "Four Hundred",
                            Point = 0,
                            city = "Damascus",
                            mobileNumber = 963993100400L,
                            phoneNumber = 963116912400L,
                            photo = "",
                            userId = 18,
                            zone = "Fahhameh"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 7, 13, 13, 30, 21, 494, DateTimeKind.Local).AddTicks(589),
                            Name = "CASUCCI",
                            Point = 0,
                            city = "Damascus",
                            mobileNumber = 963932163000L,
                            phoneNumber = 2240926L,
                            photo = "",
                            userId = 19,
                            zone = "Fahhameh"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 7, 13, 13, 30, 21, 494, DateTimeKind.Local).AddTicks(602),
                            Name = "4BODY",
                            Point = 0,
                            city = "Damascus",
                            mobileNumber = 963933320070L,
                            phoneNumber = 963112266170L,
                            photo = "",
                            userId = 20,
                            zone = "Fahhameh"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 7, 13, 13, 30, 21, 494, DateTimeKind.Local).AddTicks(616),
                            Name = "DIADORA",
                            Point = 0,
                            city = "Damascus",
                            mobileNumber = 0L,
                            phoneNumber = 5440405L,
                            photo = "",
                            userId = 21,
                            zone = "Fahhameh"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 7, 13, 13, 30, 21, 494, DateTimeKind.Local).AddTicks(629),
                            Name = "Mixed colors of batti",
                            Point = 0,
                            city = "Damascus",
                            mobileNumber = 963989312094L,
                            phoneNumber = 0L,
                            photo = "",
                            userId = 22,
                            zone = "Fahhameh"
                        });
                });

            modelBuilder.Entity("Project2.Model.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RecieverId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RecieverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Project2.Model.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("DelivOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("MarketerId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("deliverId")
                        .HasColumnType("int");

                    b.Property<int?>("payWay")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DelivOrderId");

                    b.HasIndex("MarketerId");

                    b.HasIndex("deliverId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Project2.Model.Entities.OrderBag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("OrderId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("ProductOrderId")
                        .HasColumnType("int");

                    b.Property<int>("customerId")
                        .HasColumnType("int");

                    b.Property<int>("marketerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("PostId");

                    b.HasIndex("ProductOrderId");

                    b.HasIndex("customerId");

                    b.HasIndex("marketerId");

                    b.ToTable("OrderBags");
                });

            modelBuilder.Entity("Project2.Model.Entities.Popularization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discretion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("fromAge")
                        .HasColumnType("int");

                    b.Property<int>("marketerId")
                        .HasColumnType("int");

                    b.Property<int>("productId")
                        .HasColumnType("int");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<int>("toAge")
                        .HasColumnType("int");

                    b.Property<string>("zone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("marketerId");

                    b.HasIndex("productId");

                    b.ToTable("Popularizations");
                });

            modelBuilder.Entity("Project2.Model.Entities.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("counter")
                        .HasColumnType("int");

                    b.Property<int>("marketerId")
                        .HasColumnType("int");

                    b.Property<int>("productId")
                        .HasColumnType("int");

                    b.Property<int>("reactioncount")
                        .HasColumnType("int");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("marketerId");

                    b.HasIndex("productId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Project2.Model.Entities.Product", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("photo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("productType")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Project2.Model.Entities.ProductColor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("productId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("productId");

                    b.ToTable("ProductColors");
                });

            modelBuilder.Entity("Project2.Model.Entities.ProductOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("photo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("prouductId")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<string>("size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("prouductId");

                    b.ToTable("ProductOrders");
                });

            modelBuilder.Entity("Project2.Model.Entities.ProductSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("productId")
                        .HasColumnType("int");

                    b.Property<string>("size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("productId");

                    b.ToTable("ProductSizes");
                });

            modelBuilder.Entity("Project2.Model.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Project2.Model.Entities.Search", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("userId");

                    b.ToTable("Searches");
                });

            modelBuilder.Entity("Project2.Model.Entities.Tender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Discretion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FinalDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Tenders");
                });

            modelBuilder.Entity("Project2.Model.Entities.TenderComm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MarketerId")
                        .HasColumnType("int");

                    b.Property<int>("TenderId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MarketerId");

                    b.HasIndex("TenderId");

                    b.ToTable("TenderComms");
                });

            modelBuilder.Entity("Project2.Model.Entities.User", b =>
                {
                    b.Property<int>("UID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UID"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<int?>("userType")
                        .HasColumnType("int");

                    b.HasKey("UID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UID = 1,
                            Email = "Admin@gmail.com",
                            Name = "Admin",
                            password = "YISvNNx7m0uGboKqTmBVDOsPWlub165soNNiT+WCQ1w=",
                            status = 0,
                            userType = 3
                        },
                        new
                        {
                            UID = 2,
                            Email = "zainabali@gmail.com",
                            Name = "Zainab Ali",
                            password = "tP+zU/+3Jif+8lIOPWtWleavkgLYuhKsBaPbed6ZTNU=",
                            status = 0,
                            userType = 0
                        },
                        new
                        {
                            UID = 3,
                            Email = "razanali@gmail.com",
                            Name = "Razan Ali",
                            password = "Cb9rXXzWsIPK5g62LL1wAwPrkyHPtnriBCKkfJyRiwI=",
                            status = 0,
                            userType = 0
                        },
                        new
                        {
                            UID = 4,
                            Email = "zainali@gmail.com",
                            Name = "Zain Ali",
                            password = "G2VhoTZtMDbQCcdJMZqHZDCA8CZKHoNWryk1qgcnkxg=",
                            status = 0,
                            userType = 0
                        },
                        new
                        {
                            UID = 5,
                            Email = "raghadali@gmail.com",
                            Name = "Raghad Ali",
                            password = "uqJftz54SIyOCYk50ylR46FuBcuaIKAFfrzSNxO4Fro=",
                            status = 0,
                            userType = 0
                        },
                        new
                        {
                            UID = 6,
                            Email = "ayaali@gmail.com",
                            Name = "Aya Ali",
                            password = "Y//5iznoGvAW3lNF8rzUIR8dpfGto/uAcIjWFLHFriw=",
                            status = 0,
                            userType = 0
                        },
                        new
                        {
                            UID = 7,
                            Email = "arwaessa@gmail.com",
                            Name = "Arwa Essa",
                            password = "6zC5BhAqLbse5ss45vsN9RPbgRN7mmtI1WeCosmB+U0=",
                            status = 0,
                            userType = 0
                        },
                        new
                        {
                            UID = 8,
                            Email = "osamaali@gmail.com",
                            Name = "Osama Ali",
                            password = "uVimCnhgYFobgt4t7nYWeSbFEzauujKE8IJXknHzYws=",
                            status = 0,
                            userType = 0
                        },
                        new
                        {
                            UID = 9,
                            Email = "saosanali@gmail.com",
                            Name = "Saosan Ali",
                            password = "bP4E44SWE4QcCLsZeIbUF58h80cE85kWHynuMitO9Ks=",
                            status = 0,
                            userType = 0
                        },
                        new
                        {
                            UID = 10,
                            Email = "reemmanssor@gmail.com",
                            Name = "Reem Manssor",
                            password = "FgU3FHlO/jDQ03zPsz4ZW9AccxHNysEWNigKrM56IIM=",
                            status = 0,
                            userType = 0
                        },
                        new
                        {
                            UID = 11,
                            Email = "magdesber@gmail.com",
                            Name = "Magd Esber",
                            password = "lDBAMHP4cxj2NeZdVLwwT6GKn6mgGmnRkoftWQYRHtA=",
                            status = 0,
                            userType = 0
                        },
                        new
                        {
                            UID = 12,
                            Email = "ramakaheel@gmail.com",
                            Name = "Rama Kaheel",
                            password = "pNzdhNTNLbr/Pk3DL2dwDtXcQIajM1YSR2zpLCRobco=",
                            status = 0,
                            userType = 0
                        },
                        new
                        {
                            UID = 13,
                            Email = "mohamadahmad@gmail.com",
                            Name = "Mohamad Ahmad",
                            password = "AuZexzLn0HEFuA/E3hq0CU7+1cxMox48Al1obsTaQTg=",
                            status = 0,
                            userType = 0
                        },
                        new
                        {
                            UID = 14,
                            Email = "abeerali@gmail.com",
                            Name = "Abeer Ali",
                            password = "FLamUDGJ6e0c/+jx4afx+gFIXEIQPx5clhyq6FqySzc=",
                            status = 0,
                            userType = 0
                        },
                        new
                        {
                            UID = 15,
                            Email = "samaherali@gmail.com",
                            Name = "Samaher Ali",
                            password = "N3slx+IbqYtkLKvnYaIoFP4dF95dtkR3QnSnGyurRic=",
                            status = 0,
                            userType = 0
                        },
                        new
                        {
                            UID = 16,
                            Email = "ramaabdalhak@gmail.com",
                            Name = "Rama Abd-AlHak",
                            password = "fPeOc5z3lndpfas4da358cJu4j60HL2A9hWN/UE+1lI=",
                            status = 0,
                            userType = 0
                        },
                        new
                        {
                            UID = 17,
                            Email = "rouaedress@gmail.com",
                            Name = "Roua Edress",
                            password = "3vaGS3RwIOmFUrvhI1UwZVhNBSkM1IJRU0mMEufpenI=",
                            status = 0,
                            userType = 0
                        },
                        new
                        {
                            UID = 18,
                            Email = "customer.service@400.sy",
                            Name = "Four Hundred",
                            password = "aKe6uYxPexCfGNODnzfoEVZeVe41BAmt0wHTPyFBtps=",
                            status = 0,
                            userType = 2
                        },
                        new
                        {
                            UID = 19,
                            Email = "casucci@gmail.com",
                            Name = "CASUCCI",
                            password = "r2eLRdIrvOVBRwTMqg+a445/UFTaA0Hjg4N+7XuKRWU=",
                            status = 0,
                            userType = 2
                        },
                        new
                        {
                            UID = 20,
                            Email = "forbody@gmail.com",
                            Name = "4BODY",
                            password = "iGPtncoTOyx+jU/L/OkcHPwWbAcRi9sqZm0vuqPR1E4=",
                            status = 0,
                            userType = 2
                        },
                        new
                        {
                            UID = 21,
                            Email = "syria@zarzourgroup.com",
                            Name = "DIADORA",
                            password = "z8dugNQ9ogqRxQKuKjIKA4P8DVTcAz3fANhkGFIrrsg=",
                            status = 0,
                            userType = 2
                        },
                        new
                        {
                            UID = 22,
                            Email = "info@batticolors.com",
                            Name = "Mixed colors of batti",
                            password = "3ZHHOGds45YUgSZJcRS2BZBZUl48WVlGIuDaA+pofys=",
                            status = 0,
                            userType = 2
                        },
                        new
                        {
                            UID = 23,
                            Email = "info@movo.delivery",
                            Name = "Movo delivery",
                            password = "q5AMR+Z9atWehi1PZa88R7EVAXm2tgR7INFcgNOsfRA=",
                            status = 0,
                            userType = 1
                        },
                        new
                        {
                            UID = 24,
                            Email = "eatery@gmail.com",
                            Name = "Al Kadmous",
                            password = "7VQvedUyyA8SlsKECq9SbNjobmJsGdXWANN3t7xGgkE=",
                            status = 0,
                            userType = 1
                        });
                });

            modelBuilder.Entity("Project2.Model.Entities.Auction", b =>
                {
                    b.HasOne("Project2.Model.Entities.Marketer", "Marketer")
                        .WithMany("Auctions")
                        .HasForeignKey("MarketerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Marketer");
                });

            modelBuilder.Entity("Project2.Model.Entities.AuctionComm", b =>
                {
                    b.HasOne("Project2.Model.Entities.Auction", "Auction")
                        .WithMany("AuctionComments")
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project2.Model.Entities.Customer", "Customer")
                        .WithMany("AuctionComms")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Auction");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Project2.Model.Entities.Bag", b =>
                {
                    b.HasOne("Project2.Model.Entities.ProductOrder", "ProductOrder")
                        .WithMany()
                        .HasForeignKey("ProductOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project2.Model.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("customerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project2.Model.Entities.Marketer", "Marketer")
                        .WithMany()
                        .HasForeignKey("marketerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Marketer");

                    b.Navigation("ProductOrder");
                });

            modelBuilder.Entity("Project2.Model.Entities.Complaint", b =>
                {
                    b.HasOne("Project2.Model.Entities.User", "Complainer")
                        .WithMany("Complaints")
                        .HasForeignKey("ComplainerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Complainer");
                });

            modelBuilder.Entity("Project2.Model.Entities.Cust_Auction", b =>
                {
                    b.HasOne("Project2.Model.Entities.Auction", "Auction")
                        .WithMany("CustAuctions")
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Project2.Model.Entities.Customer", "Customer")
                        .WithMany("CustAuctions")
                        .HasForeignKey("customerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Auction");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Project2.Model.Entities.Customer", b =>
                {
                    b.HasOne("Project2.Model.Entities.Marketer", null)
                        .WithMany("CustomersAgents")
                        .HasForeignKey("MarketerId");

                    b.HasOne("Project2.Model.Entities.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("Project2.Model.Entities.Customer", "userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project2.Model.Entities.CustOrder", b =>
                {
                    b.HasOne("Project2.Model.Entities.Customer", "Customer")
                        .WithMany("CustOrders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project2.Model.Entities.Order", "Order")
                        .WithMany("CustOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Project2.Model.Entities.CustPost", b =>
                {
                    b.HasOne("Project2.Model.Entities.Customer", "Customer")
                        .WithMany("CustPosts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Project2.Model.Entities.Marketer", "Marketer")
                        .WithMany()
                        .HasForeignKey("MarketerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project2.Model.Entities.Post", "Post")
                        .WithMany("CustPosts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project2.Model.Entities.ProductOrder", "ProductOrder")
                        .WithMany()
                        .HasForeignKey("ProductOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Marketer");

                    b.Navigation("Post");

                    b.Navigation("ProductOrder");
                });

            modelBuilder.Entity("Project2.Model.Entities.Deliver", b =>
                {
                    b.HasOne("Project2.Model.Entities.Marketer", null)
                        .WithMany("Delivers")
                        .HasForeignKey("MarketerId");

                    b.HasOne("Project2.Model.Entities.User", "User")
                        .WithOne("Deliver")
                        .HasForeignKey("Project2.Model.Entities.Deliver", "userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project2.Model.Entities.DelivOrder", b =>
                {
                    b.HasOne("Project2.Model.Entities.Deliver", "Deliver")
                        .WithMany("DelivOrders")
                        .HasForeignKey("DeliverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project2.Model.Entities.Order", "Order")
                        .WithMany("DelivOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deliver");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Project2.Model.Entities.FollowingPage", b =>
                {
                    b.HasOne("Project2.Model.Entities.Marketer", "Marketer")
                        .WithMany("FollowingPages")
                        .HasForeignKey("pageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Project2.Model.Entities.User", "User")
                        .WithMany("FollowingPages")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Marketer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project2.Model.Entities.Friend", b =>
                {
                    b.HasOne("Project2.Model.Entities.Customer", "Customer")
                        .WithMany("Friends")
                        .HasForeignKey("friendId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Project2.Model.Entities.User", "User")
                        .WithMany("Friends")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project2.Model.Entities.Maintainer", b =>
                {
                    b.HasOne("Project2.Model.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project2.Model.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project2.Model.Entities.Mark_Tender", b =>
                {
                    b.HasOne("Project2.Model.Entities.Marketer", "Marketer")
                        .WithMany("MarketerTenders")
                        .HasForeignKey("MarketerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Project2.Model.Entities.Tender", "Tender")
                        .WithMany("Mark_Tenders")
                        .HasForeignKey("TenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Marketer");

                    b.Navigation("Tender");
                });

            modelBuilder.Entity("Project2.Model.Entities.Marketer", b =>
                {
                    b.HasOne("Project2.Model.Entities.User", "User")
                        .WithOne("Marketer")
                        .HasForeignKey("Project2.Model.Entities.Marketer", "userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project2.Model.Entities.Notification", b =>
                {
                    b.HasOne("Project2.Model.Entities.User", "Reciever")
                        .WithMany()
                        .HasForeignKey("RecieverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project2.Model.Entities.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reciever");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Project2.Model.Entities.Order", b =>
                {
                    b.HasOne("Project2.Model.Entities.Customer", null)
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Project2.Model.Entities.DelivOrder", null)
                        .WithMany("Orders")
                        .HasForeignKey("DelivOrderId");

                    b.HasOne("Project2.Model.Entities.Marketer", null)
                        .WithMany("Orders")
                        .HasForeignKey("MarketerId");

                    b.HasOne("Project2.Model.Entities.Deliver", "Deliver")
                        .WithMany("Orders")
                        .HasForeignKey("deliverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deliver");
                });

            modelBuilder.Entity("Project2.Model.Entities.OrderBag", b =>
                {
                    b.HasOne("Project2.Model.Entities.Order", "Order")
                        .WithMany("OrderBags")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project2.Model.Entities.Post", null)
                        .WithMany("OrderBags")
                        .HasForeignKey("PostId");

                    b.HasOne("Project2.Model.Entities.ProductOrder", "ProductOrder")
                        .WithMany("OrderBags")
                        .HasForeignKey("ProductOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project2.Model.Entities.Customer", "Customer")
                        .WithMany("OrderBags")
                        .HasForeignKey("customerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project2.Model.Entities.Marketer", "Marketer")
                        .WithMany()
                        .HasForeignKey("marketerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Marketer");

                    b.Navigation("Order");

                    b.Navigation("ProductOrder");
                });

            modelBuilder.Entity("Project2.Model.Entities.Popularization", b =>
                {
                    b.HasOne("Project2.Model.Entities.Marketer", "Marketer")
                        .WithMany("Popularizations")
                        .HasForeignKey("marketerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project2.Model.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Marketer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Project2.Model.Entities.Post", b =>
                {
                    b.HasOne("Project2.Model.Entities.Marketer", "Marketer")
                        .WithMany("Posts")
                        .HasForeignKey("marketerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project2.Model.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Marketer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Project2.Model.Entities.ProductColor", b =>
                {
                    b.HasOne("Project2.Model.Entities.Product", "Product")
                        .WithMany("colors")
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Project2.Model.Entities.ProductOrder", b =>
                {
                    b.HasOne("Project2.Model.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("prouductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Project2.Model.Entities.ProductSize", b =>
                {
                    b.HasOne("Project2.Model.Entities.Product", "Product")
                        .WithMany("sizes")
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Project2.Model.Entities.Search", b =>
                {
                    b.HasOne("Project2.Model.Entities.User", "User")
                        .WithMany("Searches")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project2.Model.Entities.Tender", b =>
                {
                    b.HasOne("Project2.Model.Entities.Customer", "Customer")
                        .WithMany("Tenders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Project2.Model.Entities.TenderComm", b =>
                {
                    b.HasOne("Project2.Model.Entities.Marketer", "Marketer")
                        .WithMany("TenderComments")
                        .HasForeignKey("MarketerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Project2.Model.Entities.Tender", "Tender")
                        .WithMany("TenderComments")
                        .HasForeignKey("TenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Marketer");

                    b.Navigation("Tender");
                });

            modelBuilder.Entity("Project2.Model.Entities.Auction", b =>
                {
                    b.Navigation("AuctionComments");

                    b.Navigation("CustAuctions");
                });

            modelBuilder.Entity("Project2.Model.Entities.Customer", b =>
                {
                    b.Navigation("AuctionComms");

                    b.Navigation("CustAuctions");

                    b.Navigation("CustOrders");

                    b.Navigation("CustPosts");

                    b.Navigation("Friends");

                    b.Navigation("OrderBags");

                    b.Navigation("Orders");

                    b.Navigation("Tenders");
                });

            modelBuilder.Entity("Project2.Model.Entities.Deliver", b =>
                {
                    b.Navigation("DelivOrders");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Project2.Model.Entities.DelivOrder", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Project2.Model.Entities.Marketer", b =>
                {
                    b.Navigation("Auctions");

                    b.Navigation("CustomersAgents");

                    b.Navigation("Delivers");

                    b.Navigation("FollowingPages");

                    b.Navigation("MarketerTenders");

                    b.Navigation("Orders");

                    b.Navigation("Popularizations");

                    b.Navigation("Posts");

                    b.Navigation("TenderComments");
                });

            modelBuilder.Entity("Project2.Model.Entities.Order", b =>
                {
                    b.Navigation("CustOrders");

                    b.Navigation("DelivOrders");

                    b.Navigation("OrderBags");
                });

            modelBuilder.Entity("Project2.Model.Entities.Post", b =>
                {
                    b.Navigation("CustPosts");

                    b.Navigation("OrderBags");
                });

            modelBuilder.Entity("Project2.Model.Entities.Product", b =>
                {
                    b.Navigation("colors");

                    b.Navigation("sizes");
                });

            modelBuilder.Entity("Project2.Model.Entities.ProductOrder", b =>
                {
                    b.Navigation("OrderBags");
                });

            modelBuilder.Entity("Project2.Model.Entities.Tender", b =>
                {
                    b.Navigation("Mark_Tenders");

                    b.Navigation("TenderComments");
                });

            modelBuilder.Entity("Project2.Model.Entities.User", b =>
                {
                    b.Navigation("Complaints");

                    b.Navigation("Customer")
                        .IsRequired();

                    b.Navigation("Deliver")
                        .IsRequired();

                    b.Navigation("FollowingPages");

                    b.Navigation("Friends");

                    b.Navigation("Marketer")
                        .IsRequired();

                    b.Navigation("Searches");
                });
#pragma warning restore 612, 618
        }
    }
}
