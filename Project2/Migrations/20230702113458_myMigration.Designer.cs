// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project2.Model;

#nullable disable

namespace Project2.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230702113458_myMigration")]
    partial class myMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Project2.Model.Entities.Auction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discretion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FinalDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MarketerId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MarketerId");

                    b.ToTable("Auctions");
                });

            modelBuilder.Entity("Project2.Model.Entities.AuctionComm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AuctionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuctionId");

                    b.HasIndex("CustomerId");

                    b.ToTable("AuctionComms");
                });

            modelBuilder.Entity("Project2.Model.Entities.Complaint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ComplainerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discretion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ComplainerId");

                    b.ToTable("Complaints");
                });

            modelBuilder.Entity("Project2.Model.Entities.Cust_Auction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AuctionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("customerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuctionId");

                    b.HasIndex("customerId");

                    b.ToTable("Cust_Auctions");
                });

            modelBuilder.Entity("Project2.Model.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MarketerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Point")
                        .HasColumnType("int");

                    b.Property<string>("city")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("phoneNumber")
                        .HasColumnType("int");

                    b.Property<string>("photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.Property<string>("zone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MarketerId");

                    b.HasIndex("userId")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Project2.Model.Entities.CustOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId");

                    b.ToTable("CustOrders");
                });

            modelBuilder.Entity("Project2.Model.Entities.CustPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PostId");

                    b.ToTable("CustPosts");
                });

            modelBuilder.Entity("Project2.Model.Entities.Deliver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MarketerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("city")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("phoneNumber")
                        .HasColumnType("int");

                    b.Property<string>("photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.Property<string>("zone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MarketerId");

                    b.HasIndex("userId")
                        .IsUnique();

                    b.ToTable("Delivers");
                });

            modelBuilder.Entity("Project2.Model.Entities.DelivOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeliverId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeliverId");

                    b.HasIndex("OrderId");

                    b.ToTable("DelivOrders");
                });

            modelBuilder.Entity("Project2.Model.Entities.FollowingPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("pageId")
                        .HasColumnType("int");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("pageId");

                    b.HasIndex("userId");

                    b.ToTable("FollowingPages");
                });

            modelBuilder.Entity("Project2.Model.Entities.Friend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("friendId")
                        .HasColumnType("int");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("friendId");

                    b.HasIndex("userId");

                    b.ToTable("Friends");
                });

            modelBuilder.Entity("Project2.Model.Entities.Interaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("ReactionType")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Interactions");
                });

            modelBuilder.Entity("Project2.Model.Entities.Maintainer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Maintainers");
                });

            modelBuilder.Entity("Project2.Model.Entities.Mark_Tender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MarketerId")
                        .HasColumnType("int");

                    b.Property<int>("TenderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MarketerId");

                    b.HasIndex("TenderId");

                    b.ToTable("Mark_Tenders");
                });

            modelBuilder.Entity("Project2.Model.Entities.Marketer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Point")
                        .HasColumnType("int");

                    b.Property<string>("city")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("phoneNumber")
                        .HasColumnType("int");

                    b.Property<string>("photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.Property<string>("zone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("userId")
                        .IsUnique();

                    b.ToTable("Marketers");
                });

            modelBuilder.Entity("Project2.Model.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RecieverId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RecieverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Project2.Model.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("DelivOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("MarketerId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("deliverId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("payWay")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DelivOrderId");

                    b.HasIndex("MarketerId");

                    b.HasIndex("deliverId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Project2.Model.Entities.OrderBag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("customerId")
                        .HasColumnType("int");

                    b.Property<int>("marketerId")
                        .HasColumnType("int");

                    b.Property<int>("postId")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("customerId");

                    b.HasIndex("marketerId");

                    b.HasIndex("postId");

                    b.ToTable("OrderBags");
                });

            modelBuilder.Entity("Project2.Model.Entities.Popularization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discretion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("fromAge")
                        .HasColumnType("int");

                    b.Property<int>("marketerId")
                        .HasColumnType("int");

                    b.Property<int>("productId")
                        .HasColumnType("int");

                    b.Property<int>("toAge")
                        .HasColumnType("int");

                    b.Property<string>("zone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("marketerId");

                    b.HasIndex("productId");

                    b.ToTable("Popularizations");
                });

            modelBuilder.Entity("Project2.Model.Entities.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("counter")
                        .HasColumnType("int");

                    b.Property<int>("marketerId")
                        .HasColumnType("int");

                    b.Property<int>("productId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("marketerId");

                    b.HasIndex("productId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Project2.Model.Entities.Product", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("photo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("productType")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Project2.Model.Entities.ProductColor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("productId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("productId");

                    b.ToTable("ProductColor");
                });

            modelBuilder.Entity("Project2.Model.Entities.ProductSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("productId")
                        .HasColumnType("int");

                    b.Property<int>("size")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("productId");

                    b.ToTable("ProductSize");
                });

            modelBuilder.Entity("Project2.Model.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Project2.Model.Entities.Search", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("userId");

                    b.ToTable("Searches");
                });

            modelBuilder.Entity("Project2.Model.Entities.Tender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Discretion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FinalDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Value")
                        .HasColumnType("int");

                    b.Property<int>("customerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Tenders");
                });

            modelBuilder.Entity("Project2.Model.Entities.TenderComm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MarketerId")
                        .HasColumnType("int");

                    b.Property<int>("TenderId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MarketerId");

                    b.HasIndex("TenderId");

                    b.ToTable("TenderComms");
                });

            modelBuilder.Entity("Project2.Model.Entities.User", b =>
                {
                    b.Property<int>("UID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UID"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("userType")
                        .HasColumnType("int");

                    b.HasKey("UID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("System.Collections.Generic.List<Project2.Model.Entities.ProductSize>", b =>
                {
                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.ToTable("List<ProductSize>");
                });

            modelBuilder.Entity("Project2.Model.Entities.Auction", b =>
                {
                    b.HasOne("Project2.Model.Entities.Marketer", "Marketer")
                        .WithMany("Auctions")
                        .HasForeignKey("MarketerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Marketer");
                });

            modelBuilder.Entity("Project2.Model.Entities.AuctionComm", b =>
                {
                    b.HasOne("Project2.Model.Entities.Auction", "Auction")
                        .WithMany("AuctionComments")
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project2.Model.Entities.Customer", "Customer")
                        .WithMany("AuctionComms")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Auction");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Project2.Model.Entities.Complaint", b =>
                {
                    b.HasOne("Project2.Model.Entities.User", "Complainer")
                        .WithMany("Complaints")
                        .HasForeignKey("ComplainerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Complainer");
                });

            modelBuilder.Entity("Project2.Model.Entities.Cust_Auction", b =>
                {
                    b.HasOne("Project2.Model.Entities.Auction", "Auction")
                        .WithMany("CustAuctions")
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Project2.Model.Entities.Customer", "Customer")
                        .WithMany("CustAuctions")
                        .HasForeignKey("customerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Auction");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Project2.Model.Entities.Customer", b =>
                {
                    b.HasOne("Project2.Model.Entities.Marketer", null)
                        .WithMany("CustomersAgents")
                        .HasForeignKey("MarketerId");

                    b.HasOne("Project2.Model.Entities.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("Project2.Model.Entities.Customer", "userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project2.Model.Entities.CustOrder", b =>
                {
                    b.HasOne("Project2.Model.Entities.Customer", "Customer")
                        .WithMany("CustOrders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project2.Model.Entities.Order", "Order")
                        .WithMany("CustOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Project2.Model.Entities.CustPost", b =>
                {
                    b.HasOne("Project2.Model.Entities.Customer", "Customer")
                        .WithMany("CustPosts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Project2.Model.Entities.Post", "Post")
                        .WithMany("CustPosts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Project2.Model.Entities.Deliver", b =>
                {
                    b.HasOne("Project2.Model.Entities.Marketer", null)
                        .WithMany("Delivers")
                        .HasForeignKey("MarketerId");

                    b.HasOne("Project2.Model.Entities.User", "User")
                        .WithOne("Deliver")
                        .HasForeignKey("Project2.Model.Entities.Deliver", "userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project2.Model.Entities.DelivOrder", b =>
                {
                    b.HasOne("Project2.Model.Entities.Deliver", "Deliver")
                        .WithMany("DelivOrders")
                        .HasForeignKey("DeliverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project2.Model.Entities.Order", "Order")
                        .WithMany("DelivOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deliver");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Project2.Model.Entities.FollowingPage", b =>
                {
                    b.HasOne("Project2.Model.Entities.Marketer", "Marketer")
                        .WithMany("FollowingPages")
                        .HasForeignKey("pageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Project2.Model.Entities.User", "User")
                        .WithMany("FollowingPages")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Marketer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project2.Model.Entities.Friend", b =>
                {
                    b.HasOne("Project2.Model.Entities.Customer", "Customer")
                        .WithMany("Friends")
                        .HasForeignKey("friendId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Project2.Model.Entities.User", "User")
                        .WithMany("Friends")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project2.Model.Entities.Interaction", b =>
                {
                    b.HasOne("Project2.Model.Entities.Post", "Post")
                        .WithMany("Interactions")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project2.Model.Entities.User", "User")
                        .WithMany("Interactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project2.Model.Entities.Maintainer", b =>
                {
                    b.HasOne("Project2.Model.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Project2.Model.Entities.Mark_Tender", b =>
                {
                    b.HasOne("Project2.Model.Entities.Marketer", "Marketer")
                        .WithMany("MarketerTenders")
                        .HasForeignKey("MarketerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Project2.Model.Entities.Tender", "Tender")
                        .WithMany("Mark_Tenders")
                        .HasForeignKey("TenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Marketer");

                    b.Navigation("Tender");
                });

            modelBuilder.Entity("Project2.Model.Entities.Marketer", b =>
                {
                    b.HasOne("Project2.Model.Entities.User", "User")
                        .WithOne("Marketer")
                        .HasForeignKey("Project2.Model.Entities.Marketer", "userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project2.Model.Entities.Notification", b =>
                {
                    b.HasOne("Project2.Model.Entities.User", "Reciever")
                        .WithMany()
                        .HasForeignKey("RecieverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project2.Model.Entities.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reciever");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Project2.Model.Entities.Order", b =>
                {
                    b.HasOne("Project2.Model.Entities.Customer", null)
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Project2.Model.Entities.DelivOrder", null)
                        .WithMany("Orders")
                        .HasForeignKey("DelivOrderId");

                    b.HasOne("Project2.Model.Entities.Marketer", null)
                        .WithMany("Orders")
                        .HasForeignKey("MarketerId");

                    b.HasOne("Project2.Model.Entities.Deliver", "Deliver")
                        .WithMany("Orders")
                        .HasForeignKey("deliverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deliver");
                });

            modelBuilder.Entity("Project2.Model.Entities.OrderBag", b =>
                {
                    b.HasOne("Project2.Model.Entities.Order", null)
                        .WithMany("OrderBags")
                        .HasForeignKey("OrderId");

                    b.HasOne("Project2.Model.Entities.Customer", "Customer")
                        .WithMany("OrderBags")
                        .HasForeignKey("customerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project2.Model.Entities.Marketer", "Marketer")
                        .WithMany()
                        .HasForeignKey("marketerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project2.Model.Entities.Post", "Post")
                        .WithMany("OrderBags")
                        .HasForeignKey("postId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Marketer");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Project2.Model.Entities.Popularization", b =>
                {
                    b.HasOne("Project2.Model.Entities.Marketer", "Marketer")
                        .WithMany("Popularizations")
                        .HasForeignKey("marketerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project2.Model.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Marketer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Project2.Model.Entities.Post", b =>
                {
                    b.HasOne("Project2.Model.Entities.Marketer", "Marketer")
                        .WithMany("Posts")
                        .HasForeignKey("marketerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project2.Model.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Marketer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Project2.Model.Entities.ProductColor", b =>
                {
                    b.HasOne("Project2.Model.Entities.Product", "Product")
                        .WithMany("colors")
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Project2.Model.Entities.ProductSize", b =>
                {
                    b.HasOne("Project2.Model.Entities.Product", "Product")
                        .WithMany("sizes")
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Project2.Model.Entities.Search", b =>
                {
                    b.HasOne("Project2.Model.Entities.User", "User")
                        .WithMany("Searches")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project2.Model.Entities.Tender", b =>
                {
                    b.HasOne("Project2.Model.Entities.Customer", "Customer")
                        .WithMany("Tenders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Project2.Model.Entities.TenderComm", b =>
                {
                    b.HasOne("Project2.Model.Entities.Marketer", "Marketer")
                        .WithMany("TenderComments")
                        .HasForeignKey("MarketerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Project2.Model.Entities.Tender", "Tender")
                        .WithMany("TenderComments")
                        .HasForeignKey("TenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Marketer");

                    b.Navigation("Tender");
                });

            modelBuilder.Entity("Project2.Model.Entities.Auction", b =>
                {
                    b.Navigation("AuctionComments");

                    b.Navigation("CustAuctions");
                });

            modelBuilder.Entity("Project2.Model.Entities.Customer", b =>
                {
                    b.Navigation("AuctionComms");

                    b.Navigation("CustAuctions");

                    b.Navigation("CustOrders");

                    b.Navigation("CustPosts");

                    b.Navigation("Friends");

                    b.Navigation("OrderBags");

                    b.Navigation("Orders");

                    b.Navigation("Tenders");
                });

            modelBuilder.Entity("Project2.Model.Entities.Deliver", b =>
                {
                    b.Navigation("DelivOrders");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Project2.Model.Entities.DelivOrder", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Project2.Model.Entities.Marketer", b =>
                {
                    b.Navigation("Auctions");

                    b.Navigation("CustomersAgents");

                    b.Navigation("Delivers");

                    b.Navigation("FollowingPages");

                    b.Navigation("MarketerTenders");

                    b.Navigation("Orders");

                    b.Navigation("Popularizations");

                    b.Navigation("Posts");

                    b.Navigation("TenderComments");
                });

            modelBuilder.Entity("Project2.Model.Entities.Order", b =>
                {
                    b.Navigation("CustOrders");

                    b.Navigation("DelivOrders");

                    b.Navigation("OrderBags");
                });

            modelBuilder.Entity("Project2.Model.Entities.Post", b =>
                {
                    b.Navigation("CustPosts");

                    b.Navigation("Interactions");

                    b.Navigation("OrderBags");
                });

            modelBuilder.Entity("Project2.Model.Entities.Product", b =>
                {
                    b.Navigation("colors");

                    b.Navigation("sizes");
                });

            modelBuilder.Entity("Project2.Model.Entities.Tender", b =>
                {
                    b.Navigation("Mark_Tenders");

                    b.Navigation("TenderComments");
                });

            modelBuilder.Entity("Project2.Model.Entities.User", b =>
                {
                    b.Navigation("Complaints");

                    b.Navigation("Customer")
                        .IsRequired();

                    b.Navigation("Deliver")
                        .IsRequired();

                    b.Navigation("FollowingPages");

                    b.Navigation("Friends");

                    b.Navigation("Interactions");

                    b.Navigation("Marketer")
                        .IsRequired();

                    b.Navigation("Searches");
                });
#pragma warning restore 612, 618
        }
    }
}
