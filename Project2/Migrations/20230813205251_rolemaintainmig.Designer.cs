// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project2.Model;

#nullable disable

namespace Project2.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230813205251_rolemaintainmig")]
    partial class rolemaintainmig
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Project2.Model.Entities.Auction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discretion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FinalDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MarketerId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MarketerId");

                    b.ToTable("Auctions");
                });

            modelBuilder.Entity("Project2.Model.Entities.AuctionComm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AuctionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuctionId");

                    b.HasIndex("CustomerId");

                    b.ToTable("AuctionComms");
                });

            modelBuilder.Entity("Project2.Model.Entities.Complaint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ComplainerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discretion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ComplainerId");

                    b.ToTable("Complaints");
                });

            modelBuilder.Entity("Project2.Model.Entities.ContractedDeliver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("deliverId")
                        .HasColumnType("int");

                    b.Property<int>("marketerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("deliverId");

                    b.HasIndex("marketerId");

                    b.ToTable("ContractedDelivers");
                });

            modelBuilder.Entity("Project2.Model.Entities.Cust_Auction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AuctionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("customerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuctionId");

                    b.HasIndex("customerId");

                    b.ToTable("Cust_Auctions");
                });

            modelBuilder.Entity("Project2.Model.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAgent")
                        .HasColumnType("bit");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MarketerId")
                        .HasColumnType("int");

                    b.Property<int?>("Point")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("age")
                        .HasColumnType("int");

                    b.Property<string>("city")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("phoneNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.Property<string>("zone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MarketerId");

                    b.HasIndex("userId")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Birthdate = new DateTime(1999, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(780),
                            FName = "Zainab",
                            IsAgent = false,
                            LName = "Ali",
                            Point = 200,
                            UserName = "zainabali",
                            age = 23,
                            city = "Damascus",
                            gender = "Female",
                            phoneNumber = 963937239433L,
                            photo = "",
                            userId = 2,
                            zone = "Qatana"
                        },
                        new
                        {
                            Id = 2,
                            Birthdate = new DateTime(2002, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(952),
                            FName = "Razan",
                            IsAgent = false,
                            LName = "Ali",
                            Point = 230,
                            UserName = "razanali",
                            age = 21,
                            city = "Damascus",
                            gender = "Female",
                            phoneNumber = 963996902853L,
                            photo = "",
                            userId = 3,
                            zone = "Qatana"
                        },
                        new
                        {
                            Id = 3,
                            Birthdate = new DateTime(2006, 8, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(1013),
                            FName = "Zain",
                            IsAgent = false,
                            LName = "Ali",
                            Point = 398,
                            UserName = "zainali",
                            age = 16,
                            city = "Damascus",
                            gender = "Male",
                            phoneNumber = 963936851060L,
                            photo = "",
                            userId = 4,
                            zone = "Qatana"
                        },
                        new
                        {
                            Id = 4,
                            Birthdate = new DateTime(2008, 6, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(1077),
                            FName = "Raghad",
                            IsAgent = false,
                            LName = "Ali",
                            Point = 100,
                            UserName = "raghadali",
                            age = 15,
                            city = "Damascus",
                            gender = "Female",
                            phoneNumber = 963934470881L,
                            photo = "",
                            userId = 5,
                            zone = "Qatana"
                        },
                        new
                        {
                            Id = 5,
                            Birthdate = new DateTime(2009, 12, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(1433),
                            FName = "Aya",
                            IsAgent = false,
                            LName = "Ali",
                            Point = 100,
                            UserName = "ayaali",
                            age = 13,
                            city = "Damascus",
                            gender = "Female",
                            phoneNumber = 963934470881L,
                            photo = "",
                            userId = 6,
                            zone = "Qatana"
                        },
                        new
                        {
                            Id = 6,
                            Birthdate = new DateTime(1973, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(1516),
                            FName = "Arwa",
                            IsAgent = false,
                            LName = "Essa",
                            Point = 300,
                            UserName = "arwaessa",
                            age = 49,
                            city = "Damascus",
                            gender = "Female",
                            phoneNumber = 963934470881L,
                            photo = "",
                            userId = 7,
                            zone = "Qatana"
                        },
                        new
                        {
                            Id = 7,
                            Birthdate = new DateTime(1962, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(1565),
                            FName = "Osama",
                            IsAgent = false,
                            LName = "Ali",
                            Point = 500,
                            UserName = "osamaali",
                            age = 61,
                            city = "Damascus",
                            gender = "Male",
                            phoneNumber = 963936851941L,
                            photo = "",
                            userId = 8,
                            zone = "Qatana"
                        },
                        new
                        {
                            Id = 8,
                            Birthdate = new DateTime(1970, 3, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(1697),
                            FName = "Saosan",
                            IsAgent = false,
                            LName = "Ali",
                            Point = 346,
                            UserName = "saosanali",
                            age = 53,
                            city = "Damascus",
                            gender = "Female",
                            phoneNumber = 963985920017L,
                            photo = "",
                            userId = 9,
                            zone = "Mazah"
                        },
                        new
                        {
                            Id = 9,
                            Birthdate = new DateTime(1998, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(1750),
                            FName = "Reem",
                            IsAgent = false,
                            LName = "Manssor",
                            Point = 100,
                            UserName = "reemmanssor",
                            age = 25,
                            city = "Damascus",
                            gender = "Female",
                            phoneNumber = 963998784139L,
                            photo = "",
                            userId = 10,
                            zone = "Moaadameah"
                        },
                        new
                        {
                            Id = 10,
                            Birthdate = new DateTime(1997, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(5145),
                            FName = "Majd",
                            IsAgent = false,
                            LName = "Esber",
                            Point = 100,
                            UserName = "majdesber",
                            age = 26,
                            city = "Damascus",
                            gender = "Male",
                            phoneNumber = 963995755940L,
                            photo = "",
                            userId = 11,
                            zone = "Dummar"
                        },
                        new
                        {
                            Id = 11,
                            Birthdate = new DateTime(1998, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(5341),
                            FName = "Rama",
                            IsAgent = false,
                            LName = "Kaheel",
                            Point = 100,
                            UserName = "ramakaheel",
                            age = 25,
                            city = "Damascus",
                            gender = "Female",
                            phoneNumber = 963935470669L,
                            photo = "",
                            userId = 12,
                            zone = "Kafar-sosah"
                        },
                        new
                        {
                            Id = 12,
                            Birthdate = new DateTime(1963, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(5393),
                            FName = "Mohamad",
                            IsAgent = false,
                            LName = "Ahmad",
                            Point = 900,
                            UserName = "mohamadahmad",
                            age = 59,
                            city = "Damascus",
                            gender = "Male",
                            phoneNumber = 963934873326L,
                            photo = "",
                            userId = 13,
                            zone = "Mazah"
                        },
                        new
                        {
                            Id = 13,
                            Birthdate = new DateTime(1975, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(5439),
                            FName = "Abeer",
                            IsAgent = false,
                            LName = "Ali",
                            Point = 230,
                            UserName = "abeerali",
                            age = 48,
                            city = "Lattakia",
                            gender = "Female",
                            phoneNumber = 963983739169L,
                            photo = "",
                            userId = 14,
                            zone = "Jablah"
                        },
                        new
                        {
                            Id = 14,
                            Birthdate = new DateTime(1973, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(5484),
                            FName = "Samaher",
                            IsAgent = false,
                            LName = "Ali",
                            Point = 240,
                            UserName = "samaherali",
                            age = 49,
                            city = "Lattakia",
                            gender = "Female",
                            phoneNumber = 963967811417L,
                            photo = "",
                            userId = 15,
                            zone = "Jablah"
                        },
                        new
                        {
                            Id = 15,
                            Birthdate = new DateTime(1999, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(5710),
                            FName = "Rama",
                            IsAgent = false,
                            LName = "Abd-AlHak",
                            Point = 300,
                            UserName = "ramaabdalhak",
                            age = 24,
                            city = "Damascus",
                            gender = "Female",
                            phoneNumber = 963993991918L,
                            photo = "",
                            userId = 16,
                            zone = "Mohajreen"
                        },
                        new
                        {
                            Id = 16,
                            Birthdate = new DateTime(1999, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(5906),
                            FName = "Roua",
                            IsAgent = false,
                            LName = "Edress",
                            Point = 300,
                            UserName = "rouaedress",
                            age = 23,
                            city = "Damascus",
                            gender = "Female",
                            phoneNumber = 963947222344L,
                            photo = "",
                            userId = 17,
                            zone = "Sabborah"
                        });
                });

            modelBuilder.Entity("Project2.Model.Entities.CustomersAgent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("customerId")
                        .HasColumnType("int");

                    b.Property<int>("marketerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("customerId");

                    b.HasIndex("marketerId");

                    b.ToTable("CustomersAgents");
                });

            modelBuilder.Entity("Project2.Model.Entities.CustOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId");

                    b.ToTable("CustOrders");
                });

            modelBuilder.Entity("Project2.Model.Entities.CustPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("MarketerId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("ProductOrderId")
                        .HasColumnType("int");

                    b.Property<int>("reactioncounter")
                        .HasColumnType("int");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("MarketerId");

                    b.HasIndex("PostId");

                    b.HasIndex("ProductOrderId");

                    b.ToTable("CustPosts");
                });

            modelBuilder.Entity("Project2.Model.Entities.Deliver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MarketerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("city")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("mobileNumber")
                        .HasColumnType("bigint");

                    b.Property<long>("phoneNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.Property<string>("zone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MarketerId");

                    b.HasIndex("userId")
                        .IsUnique();

                    b.ToTable("Delivers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(6265),
                            Name = "Movo delivery",
                            UserName = "movo",
                            city = "Damascus",
                            mobileNumber = 0L,
                            phoneNumber = 118054000L,
                            photo = "https://lh3.googleusercontent.com/p/AF1QipPUuFAL_44ng3qOaOG4aoqFzbHJmIRcheBwW_SD=s680-w680-h510",
                            userId = 23,
                            zone = "Masaab ebn Omeer"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(6279),
                            Name = "Al Kadmous",
                            UserName = "alkadmous",
                            city = "Damascus",
                            mobileNumber = 0L,
                            phoneNumber = 113325002L,
                            photo = "https://www.alkadmous.com/images/logo.png",
                            userId = 24,
                            zone = "Al Hamra Street"
                        });
                });

            modelBuilder.Entity("Project2.Model.Entities.DelivOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeliverId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeliverId");

                    b.HasIndex("OrderId");

                    b.ToTable("DelivOrders");
                });

            modelBuilder.Entity("Project2.Model.Entities.FollowingPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("pageId")
                        .HasColumnType("int");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("pageId");

                    b.HasIndex("userId");

                    b.ToTable("FollowingPages");
                });

            modelBuilder.Entity("Project2.Model.Entities.Friend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("friendId")
                        .HasColumnType("int");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("friendId");

                    b.HasIndex("userId");

                    b.ToTable("Friends");
                });

            modelBuilder.Entity("Project2.Model.Entities.Maintainer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("roleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("userId");

                    b.ToTable("Maintainers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FName = "Ahmad",
                            LName = "Mohseen",
                            RoleId = 1,
                            UserName = "ahmadmohseen",
                            roleName = "User Manager",
                            userId = 25
                        },
                        new
                        {
                            Id = 2,
                            FName = "Fares",
                            LName = "Monzer",
                            RoleId = 2,
                            UserName = "faresmonzer",
                            roleName = "Complaint Manager",
                            userId = 26
                        },
                        new
                        {
                            Id = 3,
                            FName = "Kais",
                            LName = "Salem",
                            RoleId = 3,
                            UserName = "kaissalem",
                            roleName = "Popularization Manager",
                            userId = 27
                        },
                        new
                        {
                            Id = 4,
                            FName = "Mohanad",
                            LName = "Mahmood",
                            RoleId = 4,
                            UserName = "mohanadmahmood",
                            roleName = "Tender & Auction Manager",
                            userId = 28
                        });
                });

            modelBuilder.Entity("Project2.Model.Entities.Mark_Tender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MarketerId")
                        .HasColumnType("int");

                    b.Property<int>("TenderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MarketerId");

                    b.HasIndex("TenderId");

                    b.ToTable("Mark_Tenders");
                });

            modelBuilder.Entity("Project2.Model.Entities.Marketer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Point")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("city")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("mobileNumber")
                        .HasColumnType("bigint");

                    b.Property<long>("phoneNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.Property<string>("zone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("userId")
                        .IsUnique();

                    b.ToTable("Marketers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(6144),
                            Name = "Four Hundred",
                            Point = 200000,
                            UserName = "fourhundred",
                            city = "Damascus",
                            mobileNumber = 963993100400L,
                            phoneNumber = 963116912400L,
                            photo = "https://scontent-sea1-1.xx.fbcdn.net/v/t39.30808-6/341128419_3463352667274276_2171667707378597735_n.jpg?_nc_cat=100&ccb=1-7&_nc_sid=09cbfe&_nc_ohc=vDg3xROjpCEAX-sGMFE&_nc_ht=scontent-sea1-1.xx&oh=00_AfAJ7EMobr7_zeIYnmEH3Ma0UuY4yMeJZ-robXe9knQDag&oe=64CE59A4",
                            userId = 18,
                            zone = "Fahhameh"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(6160),
                            Name = "CASUCCI",
                            Point = 200000,
                            UserName = "casucci",
                            city = "Damascus",
                            mobileNumber = 963932163000L,
                            phoneNumber = 2240926L,
                            photo = "https://www.casucci-fashion.com/site/img/uploads1/larg/branches_20211101051244_56.jpg",
                            userId = 19,
                            zone = "Fahhameh"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(6172),
                            Name = "4BODY",
                            Point = 200000,
                            UserName = "4body",
                            city = "Damascus",
                            mobileNumber = 963933320070L,
                            phoneNumber = 963112266170L,
                            photo = "https://scontent-sea1-1.xx.fbcdn.net/v/t39.30808-6/335212653_978922139680099_738417653861151955_n.jpg?_nc_cat=110&ccb=1-7&_nc_sid=09cbfe&_nc_ohc=w4WR4GdXKw4AX_ghKn2&_nc_oc=AQlc2R3M8BRt7-LKEv2zE0veKshHSBETqXYFG8AW2SJYYcu3xSfan4TSy1sPCFVTC7I&_nc_ht=scontent-sea1-1.xx&oh=00_AfAgUajRyvJuIOWqQaxbzbYq0Yl_1ZVPAcie_ZrDwNFtvA&oe=64CD58C7",
                            userId = 20,
                            zone = "Fahhameh"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(6183),
                            Name = "DIADORA",
                            Point = 200000,
                            UserName = "diadora",
                            city = "Damascus",
                            mobileNumber = 0L,
                            phoneNumber = 5440405L,
                            photo = "https://scontent-sea1-1.xx.fbcdn.net/v/t39.30808-6/350510661_792092328902851_6819436556991760805_n.jpg?_nc_cat=105&ccb=1-7&_nc_sid=09cbfe&_nc_ohc=vIFhIzrcCQsAX81YJRX&_nc_ht=scontent-sea1-1.xx&oh=00_AfC1qoxEnBjVbystcBXjJkAUHGoj5aU94ufvclZteD7F7A&oe=64CDA92B",
                            userId = 21,
                            zone = "Fahhameh"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(6195),
                            Name = "Mixed colors of batti",
                            Point = 200000,
                            UserName = "batti",
                            city = "Damascus",
                            mobileNumber = 963989312094L,
                            phoneNumber = 0L,
                            photo = "https://scontent-sea1-1.xx.fbcdn.net/v/t39.30808-6/286066775_317831530564572_3718556029484236078_n.jpg?_nc_cat=103&ccb=1-7&_nc_sid=09cbfe&_nc_ohc=rvbSrrgL2EIAX-JqFfS&_nc_ht=scontent-sea1-1.xx&oh=00_AfDYQbnEilFXn2G9GDAgSLLLOsr3daBH5hU0o3UNA9zzEw&oe=64CEE28E",
                            userId = 22,
                            zone = "Fahhameh"
                        });
                });

            modelBuilder.Entity("Project2.Model.Entities.MarketerBag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ProductOrderId")
                        .HasColumnType("int");

                    b.Property<int>("customerId")
                        .HasColumnType("int");

                    b.Property<int>("marketerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductOrderId");

                    b.HasIndex("customerId");

                    b.HasIndex("marketerId");

                    b.ToTable("MarketerBags");
                });

            modelBuilder.Entity("Project2.Model.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RecieverId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RecieverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Project2.Model.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("DelivOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("MarketerId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("deliverId")
                        .HasColumnType("int");

                    b.Property<int?>("payWay")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DelivOrderId");

                    b.HasIndex("MarketerId");

                    b.HasIndex("deliverId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Project2.Model.Entities.OrderBag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("ProductOrderId")
                        .HasColumnType("int");

                    b.Property<int>("customerId")
                        .HasColumnType("int");

                    b.Property<int>("marketerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("PostId");

                    b.HasIndex("ProductOrderId");

                    b.HasIndex("customerId");

                    b.HasIndex("marketerId");

                    b.ToTable("OrderBags");
                });

            modelBuilder.Entity("Project2.Model.Entities.PointRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("marketerId")
                        .HasColumnType("int");

                    b.Property<int>("pointsAmount")
                        .HasColumnType("int");

                    b.Property<int>("pointsPrice")
                        .HasColumnType("int");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("marketerId");

                    b.ToTable("PointRequests");
                });

            modelBuilder.Entity("Project2.Model.Entities.Popularization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("fromAge")
                        .HasColumnType("int");

                    b.Property<int>("marketerId")
                        .HasColumnType("int");

                    b.Property<int>("productId")
                        .HasColumnType("int");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<string>("targetGender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("targetzone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("toAge")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("marketerId");

                    b.HasIndex("productId");

                    b.ToTable("Popularizations");
                });

            modelBuilder.Entity("Project2.Model.Entities.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("counter")
                        .HasColumnType("int");

                    b.Property<int>("marketerId")
                        .HasColumnType("int");

                    b.Property<int>("productId")
                        .HasColumnType("int");

                    b.Property<int>("reactioncount")
                        .HasColumnType("int");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("marketerId");

                    b.HasIndex("productId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(6920),
                            Description = "Vibrant fruit patterns: For a modern and trendy look, opt from our Fruit of Desire Collection in all Batti Branches",
                            counter = 54,
                            marketerId = 5,
                            productId = 1,
                            reactioncount = 200,
                            status = 0
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(6934),
                            Description = "BUY 1 GET 1 FREE  🤩Hurry! Get yours now while we're still on offer ,The offer is available in all Batti branches and for a limited time",
                            counter = 40,
                            marketerId = 5,
                            productId = 2,
                            reactioncount = 300,
                            status = 0
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(6944),
                            Description = "Casual, modern, colorful: the new dress fit into any style. Check out the new models from vitality collection.",
                            counter = 30,
                            marketerId = 5,
                            productId = 3,
                            reactioncount = 400,
                            status = 0
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(6953),
                            Description = "Trendy and colorful: matchy-matchy looks to celebrate Adha's Eid. Discover our Fruit of Desire Collection.",
                            counter = 51,
                            marketerId = 5,
                            productId = 4,
                            reactioncount = 100,
                            status = 0
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(6961),
                            Description = "Summer needs a lot of clothes 👔Take advantage of the offers and shop a variety of T-shirtsBuy a half sleeve shirt size M of selected models , at the sale price, and get the second for free",
                            counter = 44,
                            marketerId = 1,
                            productId = 5,
                            reactioncount = 150,
                            status = 0
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(6968),
                            Description = "Distinguish your child in the summer with cheerful colors",
                            counter = 23,
                            marketerId = 1,
                            productId = 6,
                            reactioncount = 110,
                            status = 0
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(6976),
                            Description = "Feel confident and stylish 🔥⭐ ",
                            counter = 60,
                            marketerId = 1,
                            productId = 7,
                            reactioncount = 70,
                            status = 0
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(6985),
                            Description = "The track jacket is made of breathable and water repellent fabric, with transfer prints on the sleeves and embroidered logos on the chest. Made in Italy.",
                            counter = 39,
                            marketerId = 4,
                            productId = 8,
                            reactioncount = 600,
                            status = 0
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(6992),
                            Description = "Men hoodie available in different, nature-inspired colors. Made of recycled cotton, Hoodie 2030 is comfortable and sustainable: it is indeed made in Italy and GRS certified .( Discount 50% 'from 184000 to 92000')",
                            counter = 56,
                            marketerId = 4,
                            productId = 9,
                            reactioncount = 500,
                            status = 0
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(6999),
                            Description = "The long sleeve tee is made from 100% cotton. Transfer prints on the sleeves, pocket with stitched pirate embroidery and logos of the three brands under the pocket.",
                            counter = 55,
                            marketerId = 4,
                            productId = 10,
                            reactioncount = 90,
                            status = 0
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(7008),
                            Description = "Short-sleeved Polo shirt made of stretch polyester piquet inspired by a retro vibe style. SS Polo Icon features contrasting knitted inserts on the collar and on the sleeve hems. The logo design complies with the tournament regulations",
                            counter = 5,
                            marketerId = 4,
                            productId = 11,
                            reactioncount = 56,
                            status = 0
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(7015),
                            Description = "The special summer collection is now in our halls In addition to bags and sports shoes 😍Now you can choose the most beautiful pieces, such as design, colors, quality, and price as well 😉We are waiting for you ❤❤",
                            counter = 46,
                            marketerId = 3,
                            productId = 12,
                            reactioncount = 456,
                            status = 0
                        },
                        new
                        {
                            Id = 13,
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(7023),
                            Description = "The special summer collection is now in our halls In addition to bags and sports shoes 😍\" +\r\n\"Now you can choose the most beautiful pieces, such as design, colors, quality, and price as well 😉\" +\r\n\"We are waiting for you ❤❤",
                            counter = 20,
                            marketerId = 3,
                            productId = 13,
                            reactioncount = 500,
                            status = 0
                        },
                        new
                        {
                            Id = 14,
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(7031),
                            Description = "The special summer collection is now in our halls In addition to bags and sports shoes 😍\" +\r\n\"Now you can choose the most beautiful pieces, such as design, colors, quality, and price as well 😉\" +\r\n\"We are waiting for you ❤❤",
                            counter = 47,
                            marketerId = 3,
                            productId = 14,
                            reactioncount = 450,
                            status = 0
                        },
                        new
                        {
                            Id = 15,
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(7039),
                            Description = "The special summer collection is now in our halls In addition to bags and sports shoes 😍\" +\r\n\"Now you can choose the most beautiful pieces, such as design, colors, quality, and price as well 😉\" +\r\n\"We are waiting for you ❤❤",
                            counter = 17,
                            marketerId = 3,
                            productId = 15,
                            reactioncount = 566,
                            status = 0
                        },
                        new
                        {
                            Id = 16,
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(7047),
                            Description = "New CASUCCI Collection Summer 2023 season",
                            counter = 33,
                            marketerId = 2,
                            productId = 16,
                            reactioncount = 340,
                            status = 0
                        },
                        new
                        {
                            Id = 17,
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(7055),
                            Description = "New CASUCCI Collection Summer 2023 season",
                            counter = 30,
                            marketerId = 2,
                            productId = 17,
                            reactioncount = 350,
                            status = 0
                        },
                        new
                        {
                            Id = 18,
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(7062),
                            Description = "New CASUCCI Collection Summer 2023 season",
                            counter = 20,
                            marketerId = 2,
                            productId = 18,
                            reactioncount = 340,
                            status = 0
                        },
                        new
                        {
                            Id = 19,
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(7071),
                            Description = "New CASUCCI Collection Summer 2023 season",
                            counter = 10,
                            marketerId = 2,
                            productId = 19,
                            reactioncount = 340,
                            status = 0
                        },
                        new
                        {
                            Id = 20,
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(7079),
                            Description = "New CASUCCI Collection Summer 2023 season",
                            counter = 56,
                            marketerId = 2,
                            productId = 20,
                            reactioncount = 500,
                            status = 0
                        },
                        new
                        {
                            Id = 21,
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(7087),
                            Description = "New CASUCCI Collection Summer 2023 season",
                            counter = 43,
                            marketerId = 2,
                            productId = 21,
                            reactioncount = 456,
                            status = 0
                        });
                });

            modelBuilder.Entity("Project2.Model.Entities.Product", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("ProductStatus")
                        .HasColumnType("int");

                    b.Property<string>("photo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("point")
                        .HasColumnType("int");

                    b.Property<string>("productType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            id = 1,
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(6416),
                            Name = "FRUIT OF DESIRE collection",
                            Price = 50000,
                            ProductStatus = 0,
                            photo = "https://scontent-mrs2-2.xx.fbcdn.net/v/t39.30808-6/355161607_564208439260417_6980687300810840314_n.jpg?_nc_cat=106&ccb=1-7&_nc_sid=8bfeb9&_nc_ohc=qfjFUcj8pzoAX99azd5&_nc_oc=AQnvQwrfN7pcVNg-6_lcnJwa0TG-_Ojo9qjK9US0EhhqifUJevJ_qm0aNpxCrtZ7-5w&_nc_ht=scontent-mrs2-2.xx&oh=00_AfCBSYFtpnof1Wpa9iId33XU87J5TwJVsnYVKwUX1rtAYA&oe=64CD4120",
                            point = 50,
                            productType = "T-Shirt"
                        },
                        new
                        {
                            id = 2,
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(6428),
                            Name = "Women's suit",
                            Price = 260000,
                            ProductStatus = 2,
                            photo = "https://scontent-mrs2-2.xx.fbcdn.net/v/t39.30808-6/357734987_570964751918119_759831027575852777_n.jpg?_nc_cat=110&ccb=1-7&_nc_sid=8bfeb9&_nc_ohc=tlYkX4FzUSAAX90yi-Z&_nc_ht=scontent-mrs2-2.xx&oh=00_AfDjmekyGOGurtaqRW9tC5j1i1seCYcEPyllILLQB4Hfpw&oe=64D4F622",
                            point = 260,
                            productType = "Suit"
                        },
                        new
                        {
                            id = 3,
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(6436),
                            Name = "Women's dress",
                            Price = 240000,
                            ProductStatus = 0,
                            photo = "https://scontent-mrs2-2.xx.fbcdn.net/v/t39.30808-6/365597223_585559370458657_5580480244724386446_n.jpg?_nc_cat=102&ccb=1-7&_nc_sid=8bfeb9&_nc_ohc=fL4zge3a0XIAX94w0z_&_nc_ht=scontent-mrs2-2.xx&oh=00_AfB1TMx7P7aVkzCb6CrnNhjmCivQnzXe-6JsvtToZNbPqg&oe=64D4E90D",
                            point = 240,
                            productType = "Dress"
                        },
                        new
                        {
                            id = 4,
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(6443),
                            Name = "Cotton blouse",
                            Price = 120000,
                            ProductStatus = 0,
                            photo = "https://scontent-mrs2-2.xx.fbcdn.net/v/t39.30808-6/356395587_564779625869965_219606057578645242_n.jpg?_nc_cat=101&ccb=1-7&_nc_sid=8bfeb9&_nc_ohc=22dD2RqZH3sAX-lnzex&_nc_ht=scontent-mrs2-2.xx&oh=00_AfDejO-_2WlQ74CLpq3VAraDqcRHsMZkirGzSpjyEHT-ow&oe=64CD6C61",
                            point = 120,
                            productType = "Blouse"
                        },
                        new
                        {
                            id = 5,
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(6450),
                            Name = "Half Sleeve Shirt",
                            Price = 130000,
                            ProductStatus = 2,
                            photo = "https://scontent-sjc3-1.xx.fbcdn.net/v/t39.30808-6/363359035_693166479519953_4336954037090474141_n.jpg?stp=dst-jpg_p600x600&_nc_cat=101&ccb=1-7&_nc_sid=730e14&_nc_ohc=jfycB9sXjkwAX-Gjq3r&_nc_ht=scontent-sjc3-1.xx&oh=00_AfA6KNYyAXkm4ANG4ENdKd2BTiUdaIora2lteurGmkY4jw&oe=64CDCE27",
                            point = 130,
                            productType = "T-Shirt"
                        },
                        new
                        {
                            id = 6,
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(6458),
                            Name = "Kids Clothes",
                            Price = 200000,
                            ProductStatus = 0,
                            photo = "https://scontent-sjc3-1.xx.fbcdn.net/v/t39.30808-6/363299835_690878096415458_2800596399957126986_n.jpg?stp=dst-jpg_s600x600&_nc_cat=110&ccb=1-7&_nc_sid=730e14&_nc_ohc=4C0ZUHyd-rAAX9UIdYJ&_nc_ht=scontent-sjc3-1.xx&oh=00_AfBXi4TRHg9Q3D8Azn58nvBLinn_GZ45S6mi6Rb4bWHcrg&oe=64CC51F5",
                            point = 200,
                            productType = "Clothes"
                        },
                        new
                        {
                            id = 7,
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(6467),
                            Name = "Men T-shirt",
                            Price = 95000,
                            ProductStatus = 0,
                            photo = "https://scontent-sjc3-1.xx.fbcdn.net/v/t39.30808-6/362290221_688812676622000_5276037355220976729_n.jpg?stp=dst-jpg_s600x600&_nc_cat=107&ccb=1-7&_nc_sid=730e14&_nc_ohc=SCDiw1ld8g4AX-KGaAW&_nc_ht=scontent-sjc3-1.xx&oh=00_AfCCVtchlg5XtLvmWXGOJSvpLIk2tfeqy11GUu1hq-9Olg&oe=64CCF749",
                            point = 95,
                            productType = "T-Shirt"
                        },
                        new
                        {
                            id = 8,
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(6475),
                            Name = "TRACK JACKET PIRATI",
                            Price = 220000,
                            ProductStatus = 0,
                            photo = "https://www.diadora.com/dw/image/v2/BBPK_PRD/on/demandware.static/-/Sites-diadora-master/default/dw6ea061e6/images/hi-res/502.181066_20002_10_HR.jpg?sw=1920",
                            point = 220,
                            productType = "Jacket"
                        },
                        new
                        {
                            id = 9,
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(6483),
                            Name = "HOODIE 2030",
                            Price = 92000,
                            ProductStatus = 1,
                            photo = "https://www.diadora.com/dw/image/v2/BBPK_PRD/on/demandware.static/-/Sites-diadora-master/default/dw4ab93b55/images/hi-res/502.179395_60063_10_HR.jpg?sw=1920",
                            point = 92,
                            productType = "Hoodie"
                        },
                        new
                        {
                            id = 10,
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(6490),
                            Name = "T-SHIRT LS PIRATI",
                            Price = 91000,
                            ProductStatus = 0,
                            photo = "https://www.diadora.com/dw/image/v2/BBPK_PRD/on/demandware.static/-/Sites-diadora-master/default/dwe0de2333/images/hi-res/502.181067_20002_10_HR.jpg?sw=1920",
                            point = 91,
                            productType = "T-Shirt"
                        },
                        new
                        {
                            id = 11,
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(6497),
                            Name = "SS POLO ICON",
                            Price = 75000,
                            ProductStatus = 0,
                            photo = "https://www.diadora.com/dw/image/v2/BBPK_PRD/on/demandware.static/-/Sites-diadora-master/default/dwe0de2333/images/hi-res/502.181067_20002_10_HR.jpg?sw=1920",
                            point = 75,
                            productType = "T-Shirt"
                        },
                        new
                        {
                            id = 12,
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(6504),
                            Name = "Sports Wear",
                            Price = 175000,
                            ProductStatus = 0,
                            photo = "https://scontent-sjc3-1.xx.fbcdn.net/v/t39.30808-6/351561572_6469658053090940_8099638842778439333_n.jpg?_nc_cat=102&ccb=1-7&_nc_sid=730e14&_nc_ohc=nwIEKo6n6M4AX9our4M&_nc_ht=scontent-sjc3-1.xx&oh=00_AfDUTMZ2a5r9EFYiZ9XC3VpVm7NQX-FZc3UhsDmfuYDKHA&oe=64CC3C43",
                            point = 175,
                            productType = "sports wear"
                        },
                        new
                        {
                            id = 13,
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(6512),
                            Name = "Sports Wear",
                            Price = 175000,
                            ProductStatus = 0,
                            photo = "https://scontent-sjc3-1.xx.fbcdn.net/v/t39.30808-6/353626922_4202504596641855_622169282761785229_n.jpg?stp=dst-jpg_s600x600&_nc_cat=111&ccb=1-7&_nc_sid=730e14&_nc_ohc=8p4FLL_RnVcAX8Ee1wS&_nc_ht=scontent-sjc3-1.xx&oh=00_AfDegqsFkpNbIq9B3_ujbWjfWH0QoihjZzrqrpoai9BEdA&oe=64CDB5D1",
                            point = 175,
                            productType = "sports wear"
                        },
                        new
                        {
                            id = 14,
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(6520),
                            Name = "Sports Wear",
                            Price = 150000,
                            ProductStatus = 0,
                            photo = "https://scontent-sjc3-1.xx.fbcdn.net/v/t39.30808-6/354075177_4208536022705379_4647263395569733627_n.jpg?stp=dst-jpg_s600x600&_nc_cat=111&ccb=1-7&_nc_sid=730e14&_nc_ohc=s0SfU6K7qtUAX_TL4ff&_nc_oc=AQkPcPlL4Xw0ntiUzeGH6cyapSGuSael6mZVxYFJ0J5R9x6-2WfNi3mtcBxJ3SfPUcU&_nc_ht=scontent-sjc3-1.xx&oh=00_AfD8Ip-ZNmnaGffpstxYBLCn6Gl9sD-JhVOVxbgzMJUQMw&oe=64CBFF25",
                            point = 150,
                            productType = "sports wear"
                        },
                        new
                        {
                            id = 15,
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(6528),
                            Name = "Sports Wear",
                            Price = 250000,
                            ProductStatus = 0,
                            photo = "https://scontent-sjc3-1.xx.fbcdn.net/v/t39.30808-6/356104038_4213923962166585_7828901660994432723_n.jpg?stp=dst-jpg_p417x417&_nc_cat=102&ccb=1-7&_nc_sid=8bfeb9&_nc_ohc=L3domGDq2vMAX9HI2ED&_nc_ht=scontent-sjc3-1.xx&oh=00_AfCZr5G8MxAyIRh94eqsLX5h96ETimCACgICKRjhngo9ZA&oe=64CDA055",
                            point = 250,
                            productType = "sports wear"
                        },
                        new
                        {
                            id = 16,
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(6536),
                            Name = "Marines pants",
                            Price = 180000,
                            ProductStatus = 0,
                            photo = "https://casucci-fashion.com/site/img/uploads1/xsmall/product_sub_20230723012843_5154.jpg",
                            point = 180,
                            productType = "Pant"
                        },
                        new
                        {
                            id = 17,
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(6543),
                            Name = "Linen pants",
                            Price = 125000,
                            ProductStatus = 0,
                            photo = "https://casucci-fashion.com/site/img/uploads1/xsmall/product_main_20230623091317_1309.jpg",
                            point = 125,
                            productType = "Pant"
                        },
                        new
                        {
                            id = 18,
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(6551),
                            Name = "Wide women's pants",
                            Price = 120000,
                            ProductStatus = 0,
                            photo = "https://casucci-fashion.com/site/img/uploads1/xsmall/product_main_20220514120722_751.jpg",
                            point = 120,
                            productType = "Pant"
                        },
                        new
                        {
                            id = 19,
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(6559),
                            Name = "Women's Linen Pants",
                            Price = 120000,
                            ProductStatus = 0,
                            photo = "https://casucci-fashion.com/site/img/uploads1/xsmall/product_main_20230327015738_1185.jpg",
                            point = 120,
                            productType = "Pant"
                        },
                        new
                        {
                            id = 20,
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(6567),
                            Name = "Women's Linen Pants",
                            Price = 37000,
                            ProductStatus = 2,
                            photo = "https://casucci-fashion.com/site/img/uploads1/xsmall/product_color_20220421095238_656_2617_2618.jpg",
                            point = 37,
                            productType = "Pant"
                        },
                        new
                        {
                            id = 21,
                            CreatedDate = new DateTime(2023, 8, 13, 23, 52, 49, 298, DateTimeKind.Local).AddTicks(6576),
                            Name = "Women's sweatpants",
                            Price = 60000,
                            ProductStatus = 0,
                            photo = "https://casucci-fashion.com/site/img/uploads1/xsmall/product_main_20220607091628_802.jpg",
                            point = 60,
                            productType = "Pant"
                        });
                });

            modelBuilder.Entity("Project2.Model.Entities.ProductColor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("productId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("productId");

                    b.ToTable("ProductColors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            color = "Black",
                            productId = 1
                        },
                        new
                        {
                            Id = 2,
                            color = "Yellow",
                            productId = 1
                        },
                        new
                        {
                            Id = 3,
                            color = "Gray",
                            productId = 1
                        },
                        new
                        {
                            Id = 4,
                            color = "Green",
                            productId = 2
                        },
                        new
                        {
                            Id = 5,
                            color = "Black",
                            productId = 2
                        },
                        new
                        {
                            Id = 6,
                            color = "Pink",
                            productId = 2
                        },
                        new
                        {
                            Id = 7,
                            color = "White",
                            productId = 2
                        },
                        new
                        {
                            Id = 8,
                            color = "Blue",
                            productId = 3
                        },
                        new
                        {
                            Id = 9,
                            color = "Pink",
                            productId = 3
                        },
                        new
                        {
                            Id = 10,
                            color = "Orange",
                            productId = 3
                        },
                        new
                        {
                            Id = 11,
                            color = "Green",
                            productId = 3
                        },
                        new
                        {
                            Id = 12,
                            color = "White",
                            productId = 3
                        },
                        new
                        {
                            Id = 13,
                            color = "Red",
                            productId = 4
                        },
                        new
                        {
                            Id = 14,
                            color = "Black",
                            productId = 4
                        },
                        new
                        {
                            Id = 15,
                            color = "Pink",
                            productId = 4
                        },
                        new
                        {
                            Id = 16,
                            color = "Gray",
                            productId = 4
                        },
                        new
                        {
                            Id = 17,
                            color = "Blue",
                            productId = 5
                        },
                        new
                        {
                            Id = 18,
                            color = "Blue",
                            productId = 6
                        },
                        new
                        {
                            Id = 19,
                            color = "Green",
                            productId = 6
                        },
                        new
                        {
                            Id = 20,
                            color = "Gray",
                            productId = 6
                        },
                        new
                        {
                            Id = 21,
                            color = "White",
                            productId = 6
                        },
                        new
                        {
                            Id = 22,
                            color = "Black",
                            productId = 7
                        },
                        new
                        {
                            Id = 23,
                            color = "White",
                            productId = 8
                        },
                        new
                        {
                            Id = 24,
                            color = "Blue",
                            productId = 9
                        },
                        new
                        {
                            Id = 25,
                            color = "White",
                            productId = 10
                        },
                        new
                        {
                            Id = 26,
                            color = "White",
                            productId = 11
                        },
                        new
                        {
                            Id = 27,
                            color = "Blue",
                            productId = 11
                        },
                        new
                        {
                            Id = 28,
                            color = "Black",
                            productId = 11
                        },
                        new
                        {
                            Id = 29,
                            color = "White",
                            productId = 12
                        },
                        new
                        {
                            Id = 30,
                            color = "Black",
                            productId = 12
                        },
                        new
                        {
                            Id = 31,
                            color = "Blue",
                            productId = 12
                        },
                        new
                        {
                            Id = 32,
                            color = "Red",
                            productId = 12
                        },
                        new
                        {
                            Id = 33,
                            color = "White",
                            productId = 13
                        },
                        new
                        {
                            Id = 34,
                            color = "Black",
                            productId = 13
                        },
                        new
                        {
                            Id = 35,
                            color = "Red",
                            productId = 13
                        },
                        new
                        {
                            Id = 36,
                            color = "Blue",
                            productId = 14
                        },
                        new
                        {
                            Id = 37,
                            color = "Black",
                            productId = 14
                        },
                        new
                        {
                            Id = 38,
                            color = "White",
                            productId = 14
                        },
                        new
                        {
                            Id = 39,
                            color = "White",
                            productId = 15
                        },
                        new
                        {
                            Id = 40,
                            color = "BlacK",
                            productId = 15
                        },
                        new
                        {
                            Id = 41,
                            color = "Gray",
                            productId = 15
                        },
                        new
                        {
                            Id = 42,
                            color = "Gray",
                            productId = 16
                        },
                        new
                        {
                            Id = 43,
                            color = "Green",
                            productId = 17
                        },
                        new
                        {
                            Id = 44,
                            color = "Blue",
                            productId = 18
                        },
                        new
                        {
                            Id = 45,
                            color = "Light Blue",
                            productId = 19
                        },
                        new
                        {
                            Id = 46,
                            color = "Beige",
                            productId = 20
                        },
                        new
                        {
                            Id = 47,
                            color = "White",
                            productId = 20
                        },
                        new
                        {
                            Id = 48,
                            color = "Blue",
                            productId = 21
                        });
                });

            modelBuilder.Entity("Project2.Model.Entities.ProductOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("photo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("productType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("prouductId")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<string>("size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("prouductId");

                    b.ToTable("ProductOrders");
                });

            modelBuilder.Entity("Project2.Model.Entities.ProductSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("productId")
                        .HasColumnType("int");

                    b.Property<string>("size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("productId");

                    b.ToTable("ProductSizes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            productId = 1,
                            size = "L"
                        },
                        new
                        {
                            Id = 2,
                            productId = 1,
                            size = "M"
                        },
                        new
                        {
                            Id = 3,
                            productId = 1,
                            size = "S"
                        },
                        new
                        {
                            Id = 4,
                            productId = 2,
                            size = "L"
                        },
                        new
                        {
                            Id = 5,
                            productId = 2,
                            size = "M"
                        },
                        new
                        {
                            Id = 6,
                            productId = 2,
                            size = "XL"
                        },
                        new
                        {
                            Id = 7,
                            productId = 2,
                            size = "S"
                        },
                        new
                        {
                            Id = 8,
                            productId = 3,
                            size = "M"
                        },
                        new
                        {
                            Id = 9,
                            productId = 3,
                            size = "S"
                        },
                        new
                        {
                            Id = 10,
                            productId = 3,
                            size = "L"
                        },
                        new
                        {
                            Id = 11,
                            productId = 3,
                            size = "XL"
                        },
                        new
                        {
                            Id = 12,
                            productId = 4,
                            size = "S"
                        },
                        new
                        {
                            Id = 13,
                            productId = 4,
                            size = "M"
                        },
                        new
                        {
                            Id = 14,
                            productId = 4,
                            size = "L"
                        },
                        new
                        {
                            Id = 15,
                            productId = 5,
                            size = "M"
                        },
                        new
                        {
                            Id = 16,
                            productId = 6,
                            size = "S"
                        },
                        new
                        {
                            Id = 17,
                            productId = 7,
                            size = "M"
                        },
                        new
                        {
                            Id = 18,
                            productId = 7,
                            size = "L"
                        },
                        new
                        {
                            Id = 19,
                            productId = 8,
                            size = "S"
                        },
                        new
                        {
                            Id = 20,
                            productId = 8,
                            size = "L"
                        },
                        new
                        {
                            Id = 21,
                            productId = 8,
                            size = "XL"
                        },
                        new
                        {
                            Id = 22,
                            productId = 9,
                            size = "S"
                        },
                        new
                        {
                            Id = 23,
                            productId = 9,
                            size = "XS"
                        },
                        new
                        {
                            Id = 24,
                            productId = 9,
                            size = "M"
                        },
                        new
                        {
                            Id = 25,
                            productId = 9,
                            size = "L"
                        },
                        new
                        {
                            Id = 26,
                            productId = 9,
                            size = "XL"
                        },
                        new
                        {
                            Id = 27,
                            productId = 9,
                            size = "XXL"
                        },
                        new
                        {
                            Id = 28,
                            productId = 10,
                            size = "S"
                        },
                        new
                        {
                            Id = 29,
                            productId = 10,
                            size = "XS"
                        },
                        new
                        {
                            Id = 30,
                            productId = 10,
                            size = "M"
                        },
                        new
                        {
                            Id = 31,
                            productId = 10,
                            size = "L"
                        },
                        new
                        {
                            Id = 32,
                            productId = 10,
                            size = "XL"
                        },
                        new
                        {
                            Id = 33,
                            productId = 10,
                            size = "XXL"
                        },
                        new
                        {
                            Id = 34,
                            productId = 11,
                            size = "S"
                        },
                        new
                        {
                            Id = 35,
                            productId = 11,
                            size = "XS"
                        },
                        new
                        {
                            Id = 36,
                            productId = 11,
                            size = "M"
                        },
                        new
                        {
                            Id = 37,
                            productId = 11,
                            size = "L"
                        },
                        new
                        {
                            Id = 38,
                            productId = 11,
                            size = "XL"
                        },
                        new
                        {
                            Id = 39,
                            productId = 11,
                            size = "XXL"
                        },
                        new
                        {
                            Id = 40,
                            productId = 12,
                            size = "M"
                        },
                        new
                        {
                            Id = 41,
                            productId = 12,
                            size = "L"
                        },
                        new
                        {
                            Id = 42,
                            productId = 12,
                            size = "XL"
                        },
                        new
                        {
                            Id = 43,
                            productId = 12,
                            size = "XXL"
                        },
                        new
                        {
                            Id = 44,
                            productId = 13,
                            size = "M"
                        },
                        new
                        {
                            Id = 45,
                            productId = 13,
                            size = "L"
                        },
                        new
                        {
                            Id = 46,
                            productId = 13,
                            size = "XL"
                        },
                        new
                        {
                            Id = 47,
                            productId = 13,
                            size = "XXL"
                        },
                        new
                        {
                            Id = 48,
                            productId = 14,
                            size = "M"
                        },
                        new
                        {
                            Id = 49,
                            productId = 14,
                            size = "L"
                        },
                        new
                        {
                            Id = 50,
                            productId = 14,
                            size = "XL"
                        },
                        new
                        {
                            Id = 51,
                            productId = 14,
                            size = "XXL"
                        },
                        new
                        {
                            Id = 52,
                            productId = 15,
                            size = "M"
                        },
                        new
                        {
                            Id = 53,
                            productId = 15,
                            size = "L"
                        },
                        new
                        {
                            Id = 54,
                            productId = 15,
                            size = "XL"
                        },
                        new
                        {
                            Id = 55,
                            productId = 15,
                            size = "XXL"
                        },
                        new
                        {
                            Id = 56,
                            productId = 16,
                            size = "M"
                        },
                        new
                        {
                            Id = 57,
                            productId = 16,
                            size = "L"
                        },
                        new
                        {
                            Id = 58,
                            productId = 17,
                            size = "M"
                        },
                        new
                        {
                            Id = 59,
                            productId = 17,
                            size = "L"
                        },
                        new
                        {
                            Id = 60,
                            productId = 18,
                            size = "S"
                        },
                        new
                        {
                            Id = 61,
                            productId = 18,
                            size = "M"
                        },
                        new
                        {
                            Id = 62,
                            productId = 18,
                            size = "L"
                        },
                        new
                        {
                            Id = 63,
                            productId = 19,
                            size = "M"
                        },
                        new
                        {
                            Id = 64,
                            productId = 20,
                            size = "30"
                        },
                        new
                        {
                            Id = 65,
                            productId = 20,
                            size = "32"
                        },
                        new
                        {
                            Id = 66,
                            productId = 20,
                            size = "34"
                        },
                        new
                        {
                            Id = 67,
                            productId = 20,
                            size = "36"
                        },
                        new
                        {
                            Id = 68,
                            productId = 21,
                            size = "28"
                        },
                        new
                        {
                            Id = 69,
                            productId = 21,
                            size = "30"
                        },
                        new
                        {
                            Id = 70,
                            productId = 21,
                            size = "32"
                        },
                        new
                        {
                            Id = 71,
                            productId = 21,
                            size = "34"
                        },
                        new
                        {
                            Id = 72,
                            productId = 21,
                            size = "36"
                        });
                });

            modelBuilder.Entity("Project2.Model.Entities.ReactionOnPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("postId")
                        .HasColumnType("int");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("postId");

                    b.HasIndex("userId");

                    b.ToTable("ReactionOnPosts");
                });

            modelBuilder.Entity("Project2.Model.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Blocking Users",
                            Name = "User Manager"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Handling Complaints",
                            Name = "Complaint Manager"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Processing Popularization",
                            Name = "Popularization Manager"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Canceling Tender or Auction",
                            Name = "Tender & Auction Manager"
                        });
                });

            modelBuilder.Entity("Project2.Model.Entities.Search", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("userId");

                    b.ToTable("Searches");
                });

            modelBuilder.Entity("Project2.Model.Entities.Tender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Discretion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FinalDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Tenders");
                });

            modelBuilder.Entity("Project2.Model.Entities.TenderComm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MarketerId")
                        .HasColumnType("int");

                    b.Property<int>("TenderId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MarketerId");

                    b.HasIndex("TenderId");

                    b.ToTable("TenderComms");
                });

            modelBuilder.Entity("Project2.Model.Entities.User", b =>
                {
                    b.Property<int>("UID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UID"), 1L, 1);

                    b.Property<long?>("Billfold")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResetCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResetPassToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<int?>("userType")
                        .HasColumnType("int");

                    b.HasKey("UID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UID = 1,
                            Billfold = 1000000L,
                            Email = "ashop0992@gmail.com",
                            Name = "Admin",
                            UserName = "admin",
                            password = "YISvNNx7m0uGboKqTmBVDOsPWlub165soNNiT+WCQ1w=",
                            status = 0,
                            userType = 3
                        },
                        new
                        {
                            UID = 2,
                            Billfold = 1000000L,
                            Email = "za562925@gmail.com",
                            Name = "Zainab Ali",
                            UserName = "zainabali",
                            password = "tP+zU/+3Jif+8lIOPWtWleavkgLYuhKsBaPbed6ZTNU=",
                            status = 0,
                            userType = 0
                        },
                        new
                        {
                            UID = 3,
                            Billfold = 1000000L,
                            Email = "razanali@gmail.com",
                            Name = "Razan Ali",
                            UserName = "razanali",
                            password = "Cb9rXXzWsIPK5g62LL1wAwPrkyHPtnriBCKkfJyRiwI=",
                            status = 0,
                            userType = 0
                        },
                        new
                        {
                            UID = 4,
                            Billfold = 1000000L,
                            Email = "zainali@gmail.com",
                            Name = "Zain Ali",
                            UserName = "zainali",
                            password = "G2VhoTZtMDbQCcdJMZqHZDCA8CZKHoNWryk1qgcnkxg=",
                            status = 0,
                            userType = 0
                        },
                        new
                        {
                            UID = 5,
                            Billfold = 1000000L,
                            Email = "raghadali@gmail.com",
                            Name = "Raghad Ali",
                            UserName = "raghadali",
                            password = "uqJftz54SIyOCYk50ylR46FuBcuaIKAFfrzSNxO4Fro=",
                            status = 0,
                            userType = 0
                        },
                        new
                        {
                            UID = 6,
                            Billfold = 1000000L,
                            Email = "ayaali@gmail.com",
                            Name = "Aya Ali",
                            UserName = "ayaali",
                            password = "Y//5iznoGvAW3lNF8rzUIR8dpfGto/uAcIjWFLHFriw=",
                            status = 0,
                            userType = 0
                        },
                        new
                        {
                            UID = 7,
                            Billfold = 1000000L,
                            Email = "arwaessa@gmail.com",
                            Name = "Arwa Essa",
                            UserName = "arwaessa",
                            password = "6zC5BhAqLbse5ss45vsN9RPbgRN7mmtI1WeCosmB+U0=",
                            status = 0,
                            userType = 0
                        },
                        new
                        {
                            UID = 8,
                            Billfold = 1000000L,
                            Email = "osamaali@gmail.com",
                            Name = "Osama Ali",
                            UserName = "osamaali",
                            password = "uVimCnhgYFobgt4t7nYWeSbFEzauujKE8IJXknHzYws=",
                            status = 0,
                            userType = 0
                        },
                        new
                        {
                            UID = 9,
                            Billfold = 1000000L,
                            Email = "saosanali@gmail.com",
                            Name = "Saosan Ali",
                            UserName = "saosanali",
                            password = "bP4E44SWE4QcCLsZeIbUF58h80cE85kWHynuMitO9Ks=",
                            status = 0,
                            userType = 0
                        },
                        new
                        {
                            UID = 10,
                            Billfold = 1000000L,
                            Email = "reemmanssor@gmail.com",
                            Name = "Reem Manssor",
                            UserName = "reemmanssor",
                            password = "FgU3FHlO/jDQ03zPsz4ZW9AccxHNysEWNigKrM56IIM=",
                            status = 0,
                            userType = 0
                        },
                        new
                        {
                            UID = 11,
                            Billfold = 1000000L,
                            Email = "majdesber@gmail.com",
                            Name = "Majd Esber",
                            UserName = "majdesber",
                            password = "Xzfs+OTKsXMbhz1YMFLLFG2hlSLd4lgUbx97XivSIkU=",
                            status = 0,
                            userType = 0
                        },
                        new
                        {
                            UID = 12,
                            Billfold = 1000000L,
                            Email = "ramakaheel@gmail.com",
                            Name = "Rama Kaheel",
                            UserName = "ramakaheel",
                            password = "pNzdhNTNLbr/Pk3DL2dwDtXcQIajM1YSR2zpLCRobco=",
                            status = 0,
                            userType = 0
                        },
                        new
                        {
                            UID = 13,
                            Billfold = 1000000L,
                            Email = "mohamadahmad@gmail.com",
                            Name = "Mohamad Ahmad",
                            UserName = "mohamadahmad",
                            password = "AuZexzLn0HEFuA/E3hq0CU7+1cxMox48Al1obsTaQTg=",
                            status = 0,
                            userType = 0
                        },
                        new
                        {
                            UID = 14,
                            Billfold = 1000000L,
                            Email = "abeerali@gmail.com",
                            Name = "Abeer Ali",
                            UserName = "abeerali",
                            password = "FLamUDGJ6e0c/+jx4afx+gFIXEIQPx5clhyq6FqySzc=",
                            status = 0,
                            userType = 0
                        },
                        new
                        {
                            UID = 15,
                            Billfold = 1000000L,
                            Email = "samaherali@gmail.com",
                            Name = "Samaher Ali",
                            UserName = "samaherali",
                            password = "N3slx+IbqYtkLKvnYaIoFP4dF95dtkR3QnSnGyurRic=",
                            status = 0,
                            userType = 0
                        },
                        new
                        {
                            UID = 16,
                            Billfold = 1000000L,
                            Email = "ramaabdalhak@gmail.com",
                            Name = "Rama Abd-AlHak",
                            UserName = "ramaabdalhak",
                            password = "fPeOc5z3lndpfas4da358cJu4j60HL2A9hWN/UE+1lI=",
                            status = 0,
                            userType = 0
                        },
                        new
                        {
                            UID = 17,
                            Billfold = 1000000L,
                            Email = "rouaedress@gmail.com",
                            Name = "Roua Edress",
                            UserName = "rouaedress",
                            password = "3vaGS3RwIOmFUrvhI1UwZVhNBSkM1IJRU0mMEufpenI=",
                            status = 0,
                            userType = 0
                        },
                        new
                        {
                            UID = 18,
                            Billfold = 1000000L,
                            Email = "customer.service@400.sy",
                            Name = "Four Hundred",
                            UserName = "fourhundred",
                            password = "aKe6uYxPexCfGNODnzfoEVZeVe41BAmt0wHTPyFBtps=",
                            status = 0,
                            userType = 2
                        },
                        new
                        {
                            UID = 19,
                            Billfold = 1000000L,
                            Email = "casucci@gmail.com",
                            Name = "CASUCCI",
                            UserName = "casucci",
                            password = "r2eLRdIrvOVBRwTMqg+a445/UFTaA0Hjg4N+7XuKRWU=",
                            status = 0,
                            userType = 2
                        },
                        new
                        {
                            UID = 20,
                            Billfold = 1000000L,
                            Email = "forbody@gmail.com",
                            Name = "4BODY",
                            UserName = "4body",
                            password = "iGPtncoTOyx+jU/L/OkcHPwWbAcRi9sqZm0vuqPR1E4=",
                            status = 0,
                            userType = 2
                        },
                        new
                        {
                            UID = 21,
                            Billfold = 1000000L,
                            Email = "syria@zarzourgroup.com",
                            Name = "DIADORA",
                            UserName = "diadora",
                            password = "z8dugNQ9ogqRxQKuKjIKA4P8DVTcAz3fANhkGFIrrsg=",
                            status = 0,
                            userType = 2
                        },
                        new
                        {
                            UID = 22,
                            Billfold = 1000000L,
                            Email = "info@batticolors.com",
                            Name = "Mixed colors of batti",
                            UserName = "batti",
                            password = "3ZHHOGds45YUgSZJcRS2BZBZUl48WVlGIuDaA+pofys=",
                            status = 0,
                            userType = 2
                        },
                        new
                        {
                            UID = 23,
                            Billfold = 1000000L,
                            Email = "info@movo.delivery",
                            Name = "Movo delivery",
                            UserName = "movo",
                            password = "q5AMR+Z9atWehi1PZa88R7EVAXm2tgR7INFcgNOsfRA=",
                            status = 0,
                            userType = 1
                        },
                        new
                        {
                            UID = 24,
                            Billfold = 1000000L,
                            Email = "eatery@gmail.com",
                            Name = "Al Kadmous",
                            UserName = "alkadmous",
                            password = "7VQvedUyyA8SlsKECq9SbNjobmJsGdXWANN3t7xGgkE=",
                            status = 0,
                            userType = 1
                        },
                        new
                        {
                            UID = 25,
                            Billfold = 0L,
                            Email = "maintainer1@gmail.com",
                            Name = "Ahmad Mohseen",
                            UserName = "ahmadmohseen",
                            password = "kr80L+XPknGxQAW8q2GCGqlOA9GTJlfUj8OVHn9xgao=",
                            status = 0,
                            userType = 4
                        },
                        new
                        {
                            UID = 26,
                            Billfold = 0L,
                            Email = "maintainer2@gmail.com",
                            Name = "Fares Monzer",
                            UserName = "faresmonzer",
                            password = "aPrypnu3HC1gDXJ6K2L8Jr5CeFG61zqe8wGbte2Yv4M=",
                            status = 0,
                            userType = 4
                        },
                        new
                        {
                            UID = 27,
                            Billfold = 0L,
                            Email = "maintainer3@gmail.com",
                            Name = "Kais Salem",
                            UserName = "kaissalem",
                            password = "blXTXWpe+6B2bMMXOXZe9kmjjyE0IrvNCwCFIU9JEuA=",
                            status = 0,
                            userType = 4
                        },
                        new
                        {
                            UID = 28,
                            Billfold = 0L,
                            Email = "maintainer4@gmail.com",
                            Name = "Mohanad Mahmood",
                            UserName = "mohanadmahmood",
                            password = "4GqMsBpT7hRiMZGcsTxE9a4aJ2VYiORHgOR2EXx17Qk=",
                            status = 0,
                            userType = 4
                        });
                });

            modelBuilder.Entity("Project2.Model.Entities.Auction", b =>
                {
                    b.HasOne("Project2.Model.Entities.Marketer", "Marketer")
                        .WithMany("Auctions")
                        .HasForeignKey("MarketerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Marketer");
                });

            modelBuilder.Entity("Project2.Model.Entities.AuctionComm", b =>
                {
                    b.HasOne("Project2.Model.Entities.Auction", "Auction")
                        .WithMany("AuctionComments")
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project2.Model.Entities.Customer", "Customer")
                        .WithMany("AuctionComms")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Auction");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Project2.Model.Entities.Complaint", b =>
                {
                    b.HasOne("Project2.Model.Entities.User", "Complainer")
                        .WithMany("Complaints")
                        .HasForeignKey("ComplainerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Complainer");
                });

            modelBuilder.Entity("Project2.Model.Entities.ContractedDeliver", b =>
                {
                    b.HasOne("Project2.Model.Entities.Deliver", "Deliver")
                        .WithMany()
                        .HasForeignKey("deliverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project2.Model.Entities.Marketer", "Marketer")
                        .WithMany()
                        .HasForeignKey("marketerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deliver");

                    b.Navigation("Marketer");
                });

            modelBuilder.Entity("Project2.Model.Entities.Cust_Auction", b =>
                {
                    b.HasOne("Project2.Model.Entities.Auction", "Auction")
                        .WithMany("CustAuctions")
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Project2.Model.Entities.Customer", "Customer")
                        .WithMany("CustAuctions")
                        .HasForeignKey("customerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Auction");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Project2.Model.Entities.Customer", b =>
                {
                    b.HasOne("Project2.Model.Entities.Marketer", null)
                        .WithMany("CustomersAgents")
                        .HasForeignKey("MarketerId");

                    b.HasOne("Project2.Model.Entities.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("Project2.Model.Entities.Customer", "userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project2.Model.Entities.CustomersAgent", b =>
                {
                    b.HasOne("Project2.Model.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("customerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project2.Model.Entities.Marketer", "Marketer")
                        .WithMany()
                        .HasForeignKey("marketerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Marketer");
                });

            modelBuilder.Entity("Project2.Model.Entities.CustOrder", b =>
                {
                    b.HasOne("Project2.Model.Entities.Customer", "Customer")
                        .WithMany("CustOrders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project2.Model.Entities.Order", "Order")
                        .WithMany("CustOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Project2.Model.Entities.CustPost", b =>
                {
                    b.HasOne("Project2.Model.Entities.Customer", "Customer")
                        .WithMany("CustPosts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Project2.Model.Entities.Marketer", "Marketer")
                        .WithMany()
                        .HasForeignKey("MarketerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project2.Model.Entities.Post", "Post")
                        .WithMany("CustPosts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project2.Model.Entities.ProductOrder", "ProductOrder")
                        .WithMany()
                        .HasForeignKey("ProductOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Marketer");

                    b.Navigation("Post");

                    b.Navigation("ProductOrder");
                });

            modelBuilder.Entity("Project2.Model.Entities.Deliver", b =>
                {
                    b.HasOne("Project2.Model.Entities.Marketer", null)
                        .WithMany("Delivers")
                        .HasForeignKey("MarketerId");

                    b.HasOne("Project2.Model.Entities.User", "User")
                        .WithOne("Deliver")
                        .HasForeignKey("Project2.Model.Entities.Deliver", "userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project2.Model.Entities.DelivOrder", b =>
                {
                    b.HasOne("Project2.Model.Entities.Deliver", "Deliver")
                        .WithMany("DelivOrders")
                        .HasForeignKey("DeliverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project2.Model.Entities.Order", "Order")
                        .WithMany("DelivOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deliver");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Project2.Model.Entities.FollowingPage", b =>
                {
                    b.HasOne("Project2.Model.Entities.Marketer", "Marketer")
                        .WithMany("FollowingPages")
                        .HasForeignKey("pageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Project2.Model.Entities.User", "User")
                        .WithMany("FollowingPages")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Marketer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project2.Model.Entities.Friend", b =>
                {
                    b.HasOne("Project2.Model.Entities.Customer", "Customer")
                        .WithMany("Friends")
                        .HasForeignKey("friendId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Project2.Model.Entities.User", "User")
                        .WithMany("Friends")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project2.Model.Entities.Maintainer", b =>
                {
                    b.HasOne("Project2.Model.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project2.Model.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project2.Model.Entities.Mark_Tender", b =>
                {
                    b.HasOne("Project2.Model.Entities.Marketer", "Marketer")
                        .WithMany("MarketerTenders")
                        .HasForeignKey("MarketerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Project2.Model.Entities.Tender", "Tender")
                        .WithMany("Mark_Tenders")
                        .HasForeignKey("TenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Marketer");

                    b.Navigation("Tender");
                });

            modelBuilder.Entity("Project2.Model.Entities.Marketer", b =>
                {
                    b.HasOne("Project2.Model.Entities.User", "User")
                        .WithOne("Marketer")
                        .HasForeignKey("Project2.Model.Entities.Marketer", "userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project2.Model.Entities.MarketerBag", b =>
                {
                    b.HasOne("Project2.Model.Entities.ProductOrder", "ProductOrder")
                        .WithMany()
                        .HasForeignKey("ProductOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project2.Model.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("customerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project2.Model.Entities.Marketer", "Marketer")
                        .WithMany()
                        .HasForeignKey("marketerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Marketer");

                    b.Navigation("ProductOrder");
                });

            modelBuilder.Entity("Project2.Model.Entities.Notification", b =>
                {
                    b.HasOne("Project2.Model.Entities.User", "Reciever")
                        .WithMany()
                        .HasForeignKey("RecieverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project2.Model.Entities.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reciever");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Project2.Model.Entities.Order", b =>
                {
                    b.HasOne("Project2.Model.Entities.Customer", null)
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Project2.Model.Entities.DelivOrder", null)
                        .WithMany("Orders")
                        .HasForeignKey("DelivOrderId");

                    b.HasOne("Project2.Model.Entities.Marketer", null)
                        .WithMany("Orders")
                        .HasForeignKey("MarketerId");

                    b.HasOne("Project2.Model.Entities.Deliver", "Deliver")
                        .WithMany("Orders")
                        .HasForeignKey("deliverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deliver");
                });

            modelBuilder.Entity("Project2.Model.Entities.OrderBag", b =>
                {
                    b.HasOne("Project2.Model.Entities.Order", "Order")
                        .WithMany("OrderBags")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project2.Model.Entities.Post", null)
                        .WithMany("OrderBags")
                        .HasForeignKey("PostId");

                    b.HasOne("Project2.Model.Entities.ProductOrder", "ProductOrder")
                        .WithMany("OrderBags")
                        .HasForeignKey("ProductOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project2.Model.Entities.Customer", "Customer")
                        .WithMany("OrderBags")
                        .HasForeignKey("customerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project2.Model.Entities.Marketer", "Marketer")
                        .WithMany()
                        .HasForeignKey("marketerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Marketer");

                    b.Navigation("Order");

                    b.Navigation("ProductOrder");
                });

            modelBuilder.Entity("Project2.Model.Entities.PointRequest", b =>
                {
                    b.HasOne("Project2.Model.Entities.Marketer", "Marketer")
                        .WithMany()
                        .HasForeignKey("marketerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Marketer");
                });

            modelBuilder.Entity("Project2.Model.Entities.Popularization", b =>
                {
                    b.HasOne("Project2.Model.Entities.Marketer", "Marketer")
                        .WithMany("Popularizations")
                        .HasForeignKey("marketerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project2.Model.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Marketer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Project2.Model.Entities.Post", b =>
                {
                    b.HasOne("Project2.Model.Entities.Marketer", "Marketer")
                        .WithMany("Posts")
                        .HasForeignKey("marketerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project2.Model.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Marketer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Project2.Model.Entities.ProductColor", b =>
                {
                    b.HasOne("Project2.Model.Entities.Product", "Product")
                        .WithMany("colors")
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Project2.Model.Entities.ProductOrder", b =>
                {
                    b.HasOne("Project2.Model.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("prouductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Project2.Model.Entities.ProductSize", b =>
                {
                    b.HasOne("Project2.Model.Entities.Product", "Product")
                        .WithMany("sizes")
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Project2.Model.Entities.ReactionOnPost", b =>
                {
                    b.HasOne("Project2.Model.Entities.Post", "Post")
                        .WithMany()
                        .HasForeignKey("postId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project2.Model.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project2.Model.Entities.Search", b =>
                {
                    b.HasOne("Project2.Model.Entities.User", "User")
                        .WithMany("Searches")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project2.Model.Entities.Tender", b =>
                {
                    b.HasOne("Project2.Model.Entities.Customer", "Customer")
                        .WithMany("Tenders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Project2.Model.Entities.TenderComm", b =>
                {
                    b.HasOne("Project2.Model.Entities.Marketer", "Marketer")
                        .WithMany("TenderComments")
                        .HasForeignKey("MarketerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Project2.Model.Entities.Tender", "Tender")
                        .WithMany("TenderComments")
                        .HasForeignKey("TenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Marketer");

                    b.Navigation("Tender");
                });

            modelBuilder.Entity("Project2.Model.Entities.Auction", b =>
                {
                    b.Navigation("AuctionComments");

                    b.Navigation("CustAuctions");
                });

            modelBuilder.Entity("Project2.Model.Entities.Customer", b =>
                {
                    b.Navigation("AuctionComms");

                    b.Navigation("CustAuctions");

                    b.Navigation("CustOrders");

                    b.Navigation("CustPosts");

                    b.Navigation("Friends");

                    b.Navigation("OrderBags");

                    b.Navigation("Orders");

                    b.Navigation("Tenders");
                });

            modelBuilder.Entity("Project2.Model.Entities.Deliver", b =>
                {
                    b.Navigation("DelivOrders");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Project2.Model.Entities.DelivOrder", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Project2.Model.Entities.Marketer", b =>
                {
                    b.Navigation("Auctions");

                    b.Navigation("CustomersAgents");

                    b.Navigation("Delivers");

                    b.Navigation("FollowingPages");

                    b.Navigation("MarketerTenders");

                    b.Navigation("Orders");

                    b.Navigation("Popularizations");

                    b.Navigation("Posts");

                    b.Navigation("TenderComments");
                });

            modelBuilder.Entity("Project2.Model.Entities.Order", b =>
                {
                    b.Navigation("CustOrders");

                    b.Navigation("DelivOrders");

                    b.Navigation("OrderBags");
                });

            modelBuilder.Entity("Project2.Model.Entities.Post", b =>
                {
                    b.Navigation("CustPosts");

                    b.Navigation("OrderBags");
                });

            modelBuilder.Entity("Project2.Model.Entities.Product", b =>
                {
                    b.Navigation("colors");

                    b.Navigation("sizes");
                });

            modelBuilder.Entity("Project2.Model.Entities.ProductOrder", b =>
                {
                    b.Navigation("OrderBags");
                });

            modelBuilder.Entity("Project2.Model.Entities.Tender", b =>
                {
                    b.Navigation("Mark_Tenders");

                    b.Navigation("TenderComments");
                });

            modelBuilder.Entity("Project2.Model.Entities.User", b =>
                {
                    b.Navigation("Complaints");

                    b.Navigation("Customer")
                        .IsRequired();

                    b.Navigation("Deliver")
                        .IsRequired();

                    b.Navigation("FollowingPages");

                    b.Navigation("Friends");

                    b.Navigation("Marketer")
                        .IsRequired();

                    b.Navigation("Searches");
                });
#pragma warning restore 612, 618
        }
    }
}
